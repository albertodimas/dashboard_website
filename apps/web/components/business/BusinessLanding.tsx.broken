'use client'

import { useState, useEffect } from 'react'
import Link from 'next/link'
import { 
  Phone, 
  Mail, 
  MapPin, 
  Clock, 
  Star, 
  Calendar,
  Check,
  CheckCircle,
  ChevronRight,
  Menu,
  X,
  Facebook,
  Instagram,
  Twitter,
  MessageCircle,
  Info,
  Search,
  Grid3X3,
  Filter
} from 'lucide-react'

interface BusinessLandingProps {
  business: any
}

export default function BusinessLanding({ business }: BusinessLandingProps) {
  // Extract theme colors from business settings
  const theme = business.settings?.theme || {}
  const colors = {
    primary: theme.primaryColor || '#3B82F6',
    secondary: theme.secondaryColor || '#1F2937',
    accent: theme.accentColor || '#10B981',
    background: theme.backgroundColor || '#FFFFFF'
  }

  const [mobileMenuOpen, setMobileMenuOpen] = useState(false)
  const [showBookingModal, setShowBookingModal] = useState(false)
  const [showPackageReserveModal, setShowPackageReserveModal] = useState(false)
  const [bookingStep, setBookingStep] = useState(1)
  const [selectedService, setSelectedService] = useState<any>(null)
  const [selectedPackage, setSelectedPackage] = useState<any>(null)
  const [selectedStaff, setSelectedStaff] = useState<any>(null)
  const [availableStaff, setAvailableStaff] = useState<any[]>([])
  const [selectedDate, setSelectedDate] = useState('')
  const [selectedTime, setSelectedTime] = useState('')
  const [availableSlots, setAvailableSlots] = useState<string[]>([])
  const [isLoadingSlots, setIsLoadingSlots] = useState(false)
  const [bookingData, setBookingData] = useState({
    customerName: '',
    customerEmail: '',
    customerPhone: '',
    notes: ''
  })
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [bookingSuccess, setBookingSuccess] = useState(false)
  const [selectedImageModal, setSelectedImageModal] = useState<any>(null)
  const [activeGalleryTab, setActiveGalleryTab] = useState('')
  const [currentServicePage, setCurrentServicePage] = useState(1)
  const servicesPerPage = 6
  const [serviceSearchTerm, setServiceSearchTerm] = useState('')
  const [selectedServiceCategory, setSelectedServiceCategory] = useState('all')
  const [reviews, setReviews] = useState<any[]>([])
  const [isLoadingReviews, setIsLoadingReviews] = useState(false)
  const [selectedServicesCategory, setSelectedServicesCategory] = useState('all')
  const [serviceSearchTermMain, setServiceSearchTermMain] = useState('')
  const [reservationData, setReservationData] = useState({
    name: '',
    email: '',
    phone: '',
    paymentMethod: 'TRANSFER',
    notes: ''
  })
  const [reservationSuccess, setReservationSuccess] = useState(false)
  
  // Format working hours using correct field names and business settings
  const formatWorkingHours = (hours: any[], settings: any) => {
    const daysMap: any = {
      0: 'Sunday',
      1: 'Monday', 
      2: 'Tuesday',
      3: 'Wednesday',
      4: 'Thursday',
      5: 'Friday',
      6: 'Saturday'
    }
    
    // Get schedule settings for default hours
    const scheduleSettings = settings?.scheduleSettings || {
      startTime: '09:00',
      endTime: '17:00'
    }
    
    // Create a complete week schedule
    const weekSchedule = []
    for (let day = 0; day <= 6; day++) {
      const dayHours = hours.find((h: any) => h.dayOfWeek === day)
      
      if (dayHours) {
        weekSchedule.push({
          day: daysMap[day],
          hours: !dayHours.isActive ? 'Closed' : `${dayHours.startTime || scheduleSettings.startTime} - ${dayHours.endTime || scheduleSettings.endTime}`
        })
      } else {
        // Use schedule settings to determine if this day should be open
        const isWorkingDay = settings?.scheduleSettings?.workingDays?.includes(day)
        weekSchedule.push({
          day: daysMap[day],
          hours: isWorkingDay ? `${scheduleSettings.startTime} - ${scheduleSettings.endTime}` : 'Closed'
        })
      }
    }
    
    return weekSchedule
  }

  const workingHours = formatWorkingHours(business.workingHours || [], business.settings || {})

  // Fetch reviews on component mount
  useEffect(() => {
    fetchReviews()
  }, [business.id])

  // Fetch available time slots when date, service, and staff are selected
  useEffect(() => {
    if (selectedDate && selectedService) {
      fetchAvailableSlots()
    }
  }, [selectedDate, selectedService, selectedStaff])

  const fetchReviews = async () => {
    setIsLoadingReviews(true)
    try {
      const response = await fetch(`/api/public/reviews?businessId=${business.id}`)
      const data = await response.json()
      setReviews(data || [])
    } catch (error) {
      console.error('Error fetching reviews:', error)
      setReviews([])
    } finally {
      setIsLoadingReviews(false)
    }
  }

  const fetchStaffForService = async (serviceId: string) => {
    try {
      // Use customSlug if available, otherwise fall back to slug or id
      const businessIdentifier = business.customSlug || business.slug || business.id
      console.log('Fetching staff for service:', serviceId, 'business identifier:', businessIdentifier)
      const url = `/api/public/staff/${encodeURIComponent(businessIdentifier)}?serviceId=${serviceId}`
      console.log('Fetching from URL:', url)
      
      const response = await fetch(url)
      if (!response.ok) {
        console.error('Response not OK:', response.status, response.statusText)
      }
      
      const data = await response.json()
      console.log('Staff data received:', data)
      console.log('Setting availableStaff to:', data.staff)
      setAvailableStaff(data.staff || [])
    } catch (error) {
      console.error('Error fetching staff:', error)
      setAvailableStaff([])
    }
  }

  const fetchAvailableSlots = async () => {
    setIsLoadingSlots(true)
    try {
      const params = new URLSearchParams({
        businessId: business.id,
        serviceId: selectedService.id,
        date: selectedDate
      })
      
      // Add staffId if staff is selected
      if (selectedStaff) {
        params.append('staffId', selectedStaff.id)
      }
      
      const response = await fetch(`/api/public/appointments?${params}`)
      const data = await response.json()
      setAvailableSlots(data.availableSlots || [])
    } catch (error) {
      console.error('Error fetching slots:', error)
      setAvailableSlots([])
    } finally {
      setIsLoadingSlots(false)
    }
  }

  const handleBookingSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsSubmitting(true)

    try {
      const appointmentData: any = {
        businessId: business.id,
        serviceId: selectedService.id,
        date: selectedDate,
        time: selectedTime,
        ...bookingData
      }
      
      // Add packageId if a package is selected
      if (selectedPackage) {
        appointmentData.packageId = selectedPackage.id
      }
      
      // Add staffId if staff is selected
      if (selectedStaff) {
        appointmentData.staffId = selectedStaff.id
      }
      
      const response = await fetch('/api/public/appointments', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(appointmentData)
      })

      if (response.ok) {
        setBookingSuccess(true)
        setBookingStep(5) // Success step
      } else {
        const error = await response.json()
        alert(error.error || 'Failed to create booking')
      }
    } catch (error) {
      console.error('Booking error:', error)
      alert('An error occurred. Please try again.')
    } finally {
      setIsSubmitting(false)
    }
  }

  const handlePackageReserve = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsSubmitting(true)

    try {
      const response = await fetch('/api/public/packages/reserve', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          packageId: selectedPackage?.id,
          customerName: reservationData.name,
          customerEmail: reservationData.email,
          customerPhone: reservationData.phone,
          paymentMethod: reservationData.paymentMethod,
          notes: reservationData.notes
        })
      })

      if (response.ok) {
        const result = await response.json()
        setReservationSuccess(true)
        alert(`Package reserved successfully! ${result.purchase.paymentInstructions.message}`)
        // Reset form
        setReservationData({
          name: '',
          email: '',
          phone: '',
          paymentMethod: 'TRANSFER',
          notes: ''
        })
        setShowPackageReserveModal(false)
      } else {
        const error = await response.json()
        alert(error.error || 'Failed to reserve package')
      }
    } catch (error) {
      console.error('Reservation error:', error)
      alert('An error occurred. Please try again.')
    } finally {
      setIsSubmitting(false)
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-white">
      {/* Header */}
      <header className="fixed top-0 w-full backdrop-blur-md bg-white/80 border-b border-gray-100 z-50">
        <nav className="container mx-auto px-6 py-4">
          <div className="flex justify-between items-center">
            <Link href={`/business/${business.slug}`} className="text-3xl font-black tracking-tight" style={{ color: colors.primary }}>
              {business.name}
            </Link>
            
            {/* Desktop Navigation */}
            <div className="hidden md:flex items-center space-x-8">
              <a href="#services" className="text-gray-700 hover:text-gray-900 font-medium transition duration-300 hover:scale-105">Services</a>
              {business.enablePackagesModule && business.packages && business.packages.length > 0 && (
                <a href="#packages" className="text-gray-700 hover:text-gray-900 font-medium transition duration-300 hover:scale-105">Packages</a>
              )}
              <a href="#gallery" className="text-gray-700 hover:text-gray-900 font-medium transition duration-300 hover:scale-105">Gallery</a>
              <a href="#reviews" className="text-gray-700 hover:text-gray-900 font-medium transition duration-300 hover:scale-105">Reviews</a>
              <a href="#contact" className="text-gray-700 hover:text-gray-900 font-medium transition duration-300 hover:scale-105">Contact</a>
              <button 
                onClick={() => {
                  setSelectedService(null)
                  setSelectedPackage(null)
                  setShowBookingModal(true)
                  setBookingStep(1)
                }}
                className="text-white px-8 py-3 rounded-full font-semibold shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 transition duration-300"
                style={{ 
                  background: `linear-gradient(135deg, ${colors.primary} 0%, ${colors.accent} 100%)` 
                }}
              >
                Book Now
              </button>
            </div>

            {/* Mobile Menu Button */}
            <button 
              className="md:hidden p-2 rounded-lg hover:bg-gray-100 transition"
              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
              style={{ color: colors.primary }}
            >
              {mobileMenuOpen ? <X size={24} /> : <Menu size={24} />}
            </button>
          </div>

          {/* Mobile Navigation */}
          {mobileMenuOpen && (
            <div className="md:hidden mt-4 pb-4 border-t border-gray-100 pt-4 bg-white/95 backdrop-blur-sm rounded-b-xl">
              <div className="flex flex-col space-y-4">
                <a href="#services" className="text-gray-700 hover:text-gray-900 font-medium transition py-2">Services</a>
                {business.enablePackagesModule && business.packages && business.packages.length > 0 && (
                  <a href="#packages" className="text-gray-700 hover:text-gray-900 font-medium transition py-2">Packages</a>
                )}
                <a href="#gallery" className="text-gray-700 hover:text-gray-900 font-medium transition py-2">Gallery</a>
                <a href="#reviews" className="text-gray-700 hover:text-gray-900 font-medium transition py-2">Reviews</a>
                <a href="#contact" className="text-gray-700 hover:text-gray-900 font-medium transition py-2">Contact</a>
                <button 
                  onClick={() => {
                    setSelectedService(null)
                    setSelectedPackage(null)
                    setShowBookingModal(true)
                    setBookingStep(1)
                    setMobileMenuOpen(false)
                  }}
                  className="text-white px-6 py-3 rounded-full text-center font-semibold shadow-lg w-full"
                  style={{ 
                    background: `linear-gradient(135deg, ${colors.primary} 0%, ${colors.accent} 100%)` 
                  }}
                >
                  Book Now
                </button>
              </div>
            </div>
          )}
        </nav>
      </header>

      {/* Hero Section */}
      <section className="relative min-h-screen flex items-center justify-center overflow-hidden">
        {/* Background with gradient overlay */}
        <div className="absolute inset-0">
          <div 
            className="absolute inset-0 bg-cover bg-center scale-105"
            style={{
              backgroundImage: business.coverImage 
                ? `url(${business.coverImage})`
                : `linear-gradient(135deg, ${colors.primary}20 0%, ${colors.accent}40 50%, ${colors.primary}30 100%), linear-gradient(45deg, #667eea 0%, #764ba2 100%)`
            }}
          ></div>
          <div className="absolute inset-0 bg-gradient-to-br from-black/40 via-black/20 to-black/60"></div>
          
          {/* Floating elements */}
          <div className="absolute top-1/4 left-1/4 w-72 h-72 bg-white/5 rounded-full blur-3xl animate-pulse"></div>
          <div className="absolute bottom-1/4 right-1/4 w-96 h-96 bg-white/3 rounded-full blur-3xl animate-pulse delay-1000"></div>
        </div>
        
        <div className="relative container mx-auto px-6 text-center text-white z-10">
          <div className="animate-fade-in-up">
            <h1 className="text-6xl md:text-7xl font-black mb-6 leading-tight">
              Welcome to{' '}
              <span 
                className="bg-gradient-to-r from-white to-gray-200 bg-clip-text text-transparent"
                style={{ 
                  backgroundImage: `linear-gradient(135deg, #ffffff 0%, ${colors.accent} 100%)` 
                }}
              >
                {business.name}
              </span>
            </h1>
            <p className="text-xl md:text-2xl mb-10 max-w-4xl mx-auto leading-relaxed text-gray-100">
              {business.description || 'Experience premium services with our professional team dedicated to excellence'}
            </p>
            <div className="flex flex-col sm:flex-row gap-6 justify-center">
              <a 
                href={`/book/${business.slug}`}
                className="group relative text-white px-10 py-5 rounded-2xl text-lg font-bold shadow-2xl hover:shadow-3xl transform hover:-translate-y-1 transition duration-300"
                style={{ 
                  background: `linear-gradient(135deg, ${colors.primary} 0%, ${colors.accent} 100%)` 
                }}
              >
                <span className="relative z-10">Book Appointment</span>
                <div className="absolute inset-0 bg-white/20 rounded-2xl opacity-0 group-hover:opacity-100 transition duration-300"></div>
              </a>
              <a 
                href="#booking"
                className="group border-2 text-white px-10 py-5 rounded-2xl text-lg font-bold backdrop-blur-sm bg-white/10 hover:bg-white/20 transform hover:-translate-y-1 transition duration-300"
                style={{ borderColor: 'rgba(255,255,255,0.3)' }}
              >
                Our Services
              </a>
            </div>
          </div>
          
          {/* Stats */}
          {business.stats && (
            <div className="grid grid-cols-3 gap-8 max-w-4xl mx-auto mt-20">
              {[
                { value: business.stats.completedAppointments + '+', label: 'Happy Customers', icon: '👥' },
                { value: business.services?.length || 0, label: 'Services', icon: '⚡' },
                { value: business.stats.averageRating?.toFixed(1) || '5.0', label: 'Average Rating', icon: '⭐' }
              ].map((stat, index) => (
                <div key={index} className="text-center group">
                  <div className="bg-white/10 backdrop-blur-sm rounded-2xl p-6 border border-white/20 group-hover:bg-white/20 transition duration-300">
                    <div className="text-3xl mb-2">{stat.icon}</div>
                    <div className="text-4xl md:text-5xl font-black mb-2 text-white">
                      {stat.value}
                    </div>
                    <div className="text-sm uppercase tracking-wider text-gray-200 font-medium">
                      {stat.label}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </section>

      {/* Services Section with Pagination */}
      <section id="services" className="py-16 bg-white">
        <div className="container mx-auto px-6">
          <div className="text-center mb-12">
            <h2 className="text-4xl font-black mb-4 text-gray-900">Our Services</h2>
            <div className="w-20 h-1 bg-gradient-to-r mx-auto rounded-full mb-4" style={{ backgroundImage: `linear-gradient(135deg, ${colors.primary} 0%, ${colors.accent} 100%)` }}></div>
            <p className="text-lg text-gray-600 max-w-2xl mx-auto">
              Professional services tailored to meet your needs
            </p>
          </div>

          {(() => {
            // Get unique categories for services
            const serviceCategories = Array.from(new Set(business.services?.map((s: any) => s.category || 'General'))) as string[]
            
            // Add packages category if packages module is enabled and there are packages
            const allCategories = business.enablePackagesModule && business.packages?.length > 0 
              ? ['packages', ...serviceCategories]
              : serviceCategories
            
            console.log('Categories display:', {
              enablePackagesModule: business.enablePackagesModule,
              packagesLength: business.packages?.length,
              serviceCategories,
              allCategories,
              shouldShowPackages: business.enablePackagesModule && business.packages?.length > 0
            })
            
            // Filter services based on search and category
            const filteredMainServices = business.services?.filter((service: any) => {
              const matchesSearch = service.name.toLowerCase().includes(serviceSearchTermMain.toLowerCase()) ||
                                  service.description?.toLowerCase().includes(serviceSearchTermMain.toLowerCase())
              const matchesCategory = selectedServicesCategory === 'all' || 
                                    (service.category || 'General') === selectedServicesCategory
              return matchesSearch && matchesCategory
            }) || []
            
            // Filter packages based on search
            const filteredMainPackages = business.packages?.filter((pkg: any) => {
              return pkg.name.toLowerCase().includes(serviceSearchTermMain.toLowerCase()) ||
                     pkg.description?.toLowerCase().includes(serviceSearchTermMain.toLowerCase())
            }) || []
            
            // Determine what to show based on selected category
            let itemsToShow: any[] = []
            if (selectedServicesCategory === 'packages') {
              itemsToShow = filteredMainPackages
            } else if (selectedServicesCategory === 'all') {
              // Show both packages and services when 'all' is selected
              itemsToShow = [...filteredMainPackages, ...filteredMainServices]
            } else {
              itemsToShow = filteredMainServices
            }
            
            const totalItems = itemsToShow.length
            const totalPages = Math.ceil(totalItems / servicesPerPage)
            const startIndex = (currentServicePage - 1) * servicesPerPage
            const endIndex = startIndex + servicesPerPage
            const currentItems = itemsToShow.slice(startIndex, endIndex)

            return (
              <>
                {/* Search and Category Filter */}
                <div className="mb-8 space-y-4 max-w-4xl mx-auto">
                  {/* Search Input */}
                  <div className="relative">
                    <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
                    <input
                      type="text"
                      placeholder="Search services..."
                      value={serviceSearchTermMain}
                      onChange={(e) => {
                        setServiceSearchTermMain(e.target.value)
                        setCurrentServicePage(1) // Reset to first page on search
                      }}
                      className="w-full pl-12 pr-4 py-3 border-2 border-gray-200 rounded-xl focus:border-2 focus:ring-0 focus:outline-none transition"
                      style={{ focusBorderColor: colors.primary }}
                    />
                  </div>
                  
                  {/* Category Filters */}
                  {(allCategories.length > 1 || (business.enablePackagesModule && business.packages?.length > 0)) && (
                    <div className="flex flex-wrap justify-center gap-2">
                      <button
                        onClick={() => {
                          setSelectedServicesCategory('all')
                          setCurrentServicePage(1)
                        }}
                        className={`px-5 py-2.5 rounded-full font-medium transition duration-200 ${
                          selectedServicesCategory === 'all'
                            ? 'text-white shadow-lg transform scale-105'
                            : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                        }`}
                        style={{
                          backgroundColor: selectedServicesCategory === 'all' ? colors.primary : undefined
                        }}
                      >
                        All
                        <span className="ml-2 text-sm opacity-75">
                          ({(business.services?.length || 0) + (business.packages?.length || 0)})
                        </span>
                      </button>
                      {allCategories.map(category => {
                        const count = category === 'packages' 
                          ? business.packages?.length || 0
                          : business.services?.filter((s: any) => (s.category || 'General') === category).length || 0
                        return (
                          <button
                            key={category}
                            onClick={() => {
                              setSelectedServicesCategory(category)
                              setCurrentServicePage(1)
                            }}
                            className={`px-5 py-2.5 rounded-full font-medium transition duration-200 ${
                              selectedServicesCategory === category
                                ? 'text-white shadow-lg transform scale-105'
                                : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                            }`}
                            style={{
                              backgroundColor: selectedServicesCategory === category ? colors.primary : undefined
                            }}
                          >
                            {category === 'packages' ? 'Packages' : category}
                            <span className="ml-2 text-sm opacity-75">
                              ({count})
                            </span>
                          </button>
                        )
                      })}
                    </div>
                  )}
                </div>

                <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-7xl mx-auto">
                  {currentItems.map((item: any, index: number) => {
                    // Check if this is a package (has services array) or a service
                    const isPackage = item.services !== undefined && Array.isArray(item.services)
                    
                    if (isPackage) {
                      // Render package card
                      return (
                        <div 
                          key={item.id} 
                          className="group relative bg-white rounded-2xl shadow-lg hover:shadow-xl p-6 border-2 border-yellow-200 hover:border-yellow-300 transform hover:-translate-y-1 transition duration-300"
                        >
                          {/* Package Badge */}
                          {item.discount && (
                            <div 
                              className="absolute -top-3 -right-3 px-3 py-1 rounded-full text-white text-xs font-bold shadow-lg"
                              style={{ backgroundColor: colors.accent }}
                            >
                              {item.discount}% OFF
                            </div>
                          )}
                          
                          <div className="flex items-start mb-4">
                            <div 
                              className="w-12 h-12 rounded-xl flex items-center justify-center flex-shrink-0 bg-gradient-to-br from-yellow-400 to-orange-500"
                            >
                              <span className="text-lg text-white font-bold">P</span>
                            </div>
                            <div className="ml-4 flex-1">
                              <h3 className="text-xl font-bold text-gray-900 group-hover:text-gray-800">{item.name}</h3>
                              <p className="text-sm text-gray-600 mt-1 line-clamp-2">{item.description}</p>
                            </div>
                          </div>
                          
                          {/* Package Services List */}
                          <div className="mb-4 p-3 bg-gray-50 rounded-lg">
                            <p className="text-xs font-semibold text-gray-500 mb-2">INCLUDES:</p>
                            <ul className="space-y-1">
                              {item.services?.slice(0, 3).map((ps: any) => (
                                <li key={ps.serviceId} className="flex items-center text-xs text-gray-600">
                                  <CheckCircle size={12} className="mr-1 text-green-500" />
                                  <span>{ps.service?.name || 'Service'} ({ps.quantity}x)</span>
                                </li>
                              ))}
                              {item.services?.length > 3 && (
                                <li className="text-xs text-gray-500 italic">+{item.services.length - 3} more services</li>
                              )}
                            </ul>
                          </div>
                          
                          {/* Price and Duration Row */}
                          <div className="flex items-center justify-between mb-4 py-3 px-4 bg-yellow-50 rounded-xl">
                            <div className="flex items-center text-gray-600">
                              <Clock size={16} className="mr-1" style={{ color: colors.primary }} />
                              <span className="text-sm font-medium">{item.duration} min</span>
                            </div>
                            <div>
                              {item.originalPrice && (
                                <span className="text-sm text-gray-400 line-through mr-2">${item.originalPrice}</span>
                              )}
                              <span className="text-2xl font-black" style={{ color: colors.primary }}>
                                ${item.price}
                              </span>
                            </div>
                          </div>
                          
                          {/* Book Package Button */}
                          <button 
                            onClick={() => {
                              // Set the package as selected
                              // For packages, use the first service in the package for duration/slots
                              const firstService = item.services?.[0]?.service || item
                              setSelectedService(firstService)
                              setSelectedPackage(item)
                              
                              // Skip service selection and go to next step
                              if (business.enableStaffModule) {
                                // If staff module is enabled, go to staff selection (step 2)
                                setBookingStep(2)
                                // For packages, we might need to handle staff differently
                                setAvailableStaff(business.staff || [])
                              } else {
                                // If no staff module, go directly to date/time selection (step 3)
                                setBookingStep(3)
                              }
                              
                              // Open the booking modal
                              setShowBookingModal(true)
                            }}
                            className="group/btn relative block w-full text-white text-center py-2.5 rounded-xl text-sm font-bold overflow-hidden shadow hover:shadow-lg transform hover:-translate-y-0.5 transition duration-300 bg-gradient-to-r from-yellow-500 to-orange-500"
                          >
                            <span className="relative z-10">Book Package</span>
                            <div className="absolute inset-0 bg-white/20 scale-x-0 group-hover/btn:scale-x-100 transition-transform duration-300 origin-left"></div>
                          </button>
                        </div>
                      )
                    }
                    
                    // Render service card
                    return (
                      <div 
                        key={item.id} 
                        className="group relative bg-white rounded-2xl shadow-lg hover:shadow-xl p-6 border border-gray-100 hover:border-gray-200 transform hover:-translate-y-1 transition duration-300"
                      >
                        {/* Compact Service Badge */}
                        <div className="flex items-start mb-4">
                          <div 
                            className="w-12 h-12 rounded-xl flex items-center justify-center flex-shrink-0"
                            style={{ background: `linear-gradient(135deg, ${colors.primary} 0%, ${colors.accent} 100%)` }}
                          >
                            <span className="text-lg text-white font-bold">{item.name.charAt(0)}</span>
                          </div>
                          <div className="ml-4 flex-1">
                            <h3 className="text-xl font-bold text-gray-900 group-hover:text-gray-800">{item.name}</h3>
                            <p className="text-sm text-gray-600 mt-1 line-clamp-2">{item.description}</p>
                          </div>
                        </div>
                        
                        {/* Price and Duration Row */}
                        <div className="flex items-center justify-between mb-4 py-3 px-4 bg-gray-50 rounded-xl">
                          <div className="flex items-center text-gray-600">
                            <Clock size={16} className="mr-1" style={{ color: colors.primary }} />
                            <span className="text-sm font-medium">{item.duration} min</span>
                          </div>
                          <div className="text-2xl font-black" style={{ color: colors.primary }}>
                            ${item.price}
                          </div>
                        </div>
                        
                        {/* Smaller Book Button */}
                        <button 
                          onClick={() => {
                            // Set the service as selected
                            setSelectedService(item)
                            setSelectedPackage(null) // Clear any package selection
                            
                            // Skip service selection and go to next step
                            if (business.enableStaffModule) {
                              // Load staff for this service and go to staff selection (step 2)
                              fetchStaffForService(item.id)
                              setBookingStep(2)
                            } else {
                              // If no staff module, go directly to date/time selection (step 3)
                              setBookingStep(3)
                            }
                            
                            // Open the booking modal
                            setShowBookingModal(true)
                          }}
                          className="group/btn relative block w-full text-white text-center py-2.5 rounded-xl text-sm font-bold overflow-hidden shadow hover:shadow-lg transform hover:-translate-y-0.5 transition duration-300"
                          style={{ background: `linear-gradient(135deg, ${colors.primary} 0%, ${colors.accent} 100%)` }}
                        >
                          <span className="relative z-10">Book Now</span>
                          <div className="absolute inset-0 bg-white/20 scale-x-0 group-hover/btn:scale-x-100 transition-transform duration-300 origin-left"></div>
                        </button>
                      </div>
                    )
                  })}
                </div>

                {/* Pagination Controls */}
                {totalPages > 1 && (
                  <div className="flex items-center justify-center mt-10 space-x-2">
                    <button
                      onClick={() => setCurrentServicePage(Math.max(1, currentServicePage - 1))}
                      disabled={currentServicePage === 1}
                      className="px-4 py-2 rounded-lg font-medium transition duration-200 disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-100"
                      style={{ color: colors.primary }}
                    >
                      Previous
                    </button>
                    
                    <div className="flex space-x-1">
                      {[...Array(totalPages)].map((_, i) => (
                        <button
                          key={i + 1}
                          onClick={() => setCurrentServicePage(i + 1)}
                          className={`w-10 h-10 rounded-lg font-medium transition duration-200 ${
                            currentServicePage === i + 1
                              ? 'text-white shadow-lg'
                              : 'text-gray-600 hover:bg-gray-100'
                          }`}
                          style={{
                            backgroundColor: currentServicePage === i + 1 ? colors.primary : 'transparent'
                          }}
                        >
                          {i + 1}
                        </button>
                      ))}
                    </div>
                    
                    <button
                      onClick={() => setCurrentServicePage(Math.min(totalPages, currentServicePage + 1))}
                      disabled={currentServicePage === totalPages}
                      className="px-4 py-2 rounded-lg font-medium transition duration-200 disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-100"
                      style={{ color: colors.primary }}
                    >
                      Next
                    </button>
                  </div>
                )}

                {/* Items Counter */}
                {totalItems > 0 && (
                  <div className="text-center mt-4 text-sm text-gray-500">
                    Showing {startIndex + 1}-{Math.min(endIndex, totalItems)} of {totalItems} 
                    {selectedServicesCategory === 'packages' ? 'packages' : selectedServicesCategory === 'all' ? 'items' : 'services'}
                    {serviceSearchTermMain && ` matching "${serviceSearchTermMain}"`}
                  </div>
                )}
                
                {totalItems === 0 && (
                  <div className="text-center py-12 text-gray-500">
                    <Grid3X3 size={48} className="mx-auto mb-4 opacity-30" />
                    <p>No {selectedServicesCategory === 'packages' ? 'packages' : 'services'} found</p>
                  </div>
                )}

                {/* Book Now Button */}
                {business.services && business.services.length > 0 && (
                  <div className="text-center mt-8">
                    <button
                      onClick={() => {
                        setSelectedService(null)
                        setSelectedPackage(null)
                        setShowBookingModal(true)
                        setBookingStep(1)
                      }}
                      className="inline-flex items-center px-8 py-4 rounded-xl font-semibold text-white shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 transition duration-300"
                      style={{ 
                        background: `linear-gradient(135deg, ${colors.primary} 0%, ${colors.accent} 100%)` 
                      }}
                    >
                      <Calendar className="mr-2" size={20} />
                      Book an Appointment
                    </button>
                  </div>
                )}
              </>
            )
          })()}
        </div>
      </section>

      {/* Packages Section */}
      {business.enablePackagesModule && business.packages && business.packages.length > 0 && (
        <section id="packages" className="py-24 bg-gradient-to-br from-blue-50 to-purple-50">
          <div className="container mx-auto px-6">
            <div className="text-center mb-16">
              <h2 className="text-5xl font-black mb-6 text-gray-900">
                Special Packages
              </h2>
              <p className="text-xl text-gray-600 max-w-3xl mx-auto">
                Save more with our carefully curated service bundles
              </p>
            </div>

            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-7xl mx-auto">
              {business.packages.map((pkg: any) => {
                const savings = pkg.originalPrice && pkg.discount 
                  ? (pkg.originalPrice - pkg.price).toFixed(2)
                  : null
                
                return (
                  <div 
                    key={pkg.id}
                    className="relative group bg-white rounded-3xl shadow-xl hover:shadow-2xl transform hover:-translate-y-2 transition duration-300 overflow-hidden"
                  >
                    {/* Discount Badge */}
                    {pkg.discount && pkg.discount > 0 && (
                      <div 
                        className="absolute top-4 right-4 z-10 px-3 py-1 rounded-full text-white font-bold text-sm shadow-lg"
                        style={{ backgroundColor: colors.accent }}
                      >
                        {pkg.discount}% OFF
                      </div>
                    )}

                    {/* Package Content */}
                    <div className="p-8">
                      <div className="mb-6">
                        <h3 className="text-2xl font-bold text-gray-900 mb-3">{pkg.name}</h3>
                        {pkg.description && (
                          <p className="text-gray-600">{pkg.description}</p>
                        )}
                      </div>

                      {/* Services Included */}
                      <div className="mb-6">
                        <p className="text-sm font-semibold text-gray-700 mb-3">This package includes:</p>
                        <div className="space-y-2">
                          {pkg.services?.map((ps: any) => (
                            <div key={ps.serviceId} className="flex items-center text-sm">
                              <CheckCircle size={16} className="mr-2 text-green-500 flex-shrink-0" />
                              <span className="text-gray-700">
                                {ps.quantity > 1 && `${ps.quantity}x `}
                                {ps.service?.name}
                              </span>
                            </div>
                          ))}
                        </div>
                      </div>

                      {/* Package Details */}
                      <div className="flex items-center justify-between mb-6 py-4 border-t border-b border-gray-100">
                        <div className="flex items-center text-gray-600">
                          <Clock size={18} className="mr-2" style={{ color: colors.primary }} />
                          <span className="text-sm">{pkg.duration} min total</span>
                        </div>
                        {pkg.validityDays && (
                          <div className="flex items-center text-gray-600">
                            <Calendar size={18} className="mr-2" style={{ color: colors.primary }} />
                            <span className="text-sm">Valid {pkg.validityDays} days</span>
                          </div>
                        )}
                      </div>

                      {/* Pricing */}
                      <div className="mb-6">
                        <div className="flex items-end justify-between">
                          <div>
                            <div className="text-3xl font-black" style={{ color: colors.primary }}>
                              ${pkg.price}
                            </div>
                            {pkg.originalPrice && pkg.originalPrice > pkg.price && (
                              <div className="mt-1">
                                <span className="text-sm text-gray-500 line-through mr-2">
                                  ${pkg.originalPrice.toFixed(2)}
                                </span>
                                {savings && (
                                  <span className="text-sm text-green-600 font-semibold">
                                    Save ${savings}
                                  </span>
                                )}
                              </div>
                            )}
                          </div>
                        </div>
                      </div>

                      {/* Book/Reserve Buttons */}
                      <div className="space-y-3">
                        {/* Reserve Package Button */}
                        <button 
                          onClick={() => {
                            setSelectedPackage(pkg)
                            setShowPackageReserveModal(true)
                          }}
                          className="w-full py-4 rounded-xl font-semibold text-white shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 transition duration-300"
                          style={{ 
                            background: `linear-gradient(135deg, ${colors.primary} 0%, ${colors.accent} 100%)` 
                          }}
                        >
                          Reserve Package
                        </button>
                        
                        {/* Book Individual Session (if user has active package) */}
                        <button 
                          onClick={() => {
                            setSelectedPackage(pkg)
                            // Use the first service in the package for duration/slots
                            const firstService = pkg.services?.[0]?.service || pkg
                            setSelectedService(firstService)
                            setShowBookingModal(true)
                            // Skip to staff selection or date/time based on module
                            if (business.enableStaffModule) {
                              setBookingStep(2)
                              // For packages, we might need to handle staff differently
                              // For now, show all available staff
                              setAvailableStaff(business.staff || [])
                            } else {
                              setBookingStep(3)
                            }
                          }}
                          className="w-full py-3 rounded-xl font-semibold border-2 transition duration-300"
                          style={{ 
                            borderColor: colors.primary,
                            color: colors.primary
                          }}
                        >
                        Book This Package
                      </button>
                    </div>
                  </div>
                )
              })}
            </div>
          </div>
        </section>
      )}

      {/* Gallery Section - Service Tabs with Modal */}
      {business.features?.gallery && business.features.gallery.length > 0 && (() => {
        // Group gallery items by category (service)
        const groupedItems = business.features.gallery.reduce((acc: any, item: any) => {
          const category = item.category || 'General'
          if (!acc[category]) {
            acc[category] = []
          }
          acc[category].push(item)
          return acc
        }, {})

        const categories = Object.keys(groupedItems)
        const totalGalleryItems = business.features.gallery.length
        
        // Set default active tab if not set
        const currentActiveTab = activeGalleryTab || 'all'
        if (!activeGalleryTab) {
          setTimeout(() => setActiveGalleryTab('all'), 0)
        }
        
        // Get items based on selected category
        const displayItems = currentActiveTab === 'all' 
          ? business.features.gallery 
          : (groupedItems[currentActiveTab] || [])

        return (
          <section id="gallery" className="py-24 bg-gradient-to-br from-gray-50 to-gray-100">
            <div className="container mx-auto px-6">
              <div className="text-center mb-16">
                <h2 className="text-5xl font-black mb-6 text-gray-900">
                  Portfolio & Work Examples
                </h2>
                <div className="w-24 h-1 bg-gradient-to-r mx-auto rounded-full mb-6" style={{ backgroundImage: `linear-gradient(135deg, ${colors.primary} 0%, ${colors.accent} 100%)` }}></div>
                <p className="text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed">
                  Explore our previous work by service category and see the quality that defines us
                </p>
              </div>

              {/* Service Navigation Tabs */}
              <div className="flex flex-wrap justify-center gap-4 mb-12">
                {/* All Items Tab */}
                <button
                  onClick={() => setActiveGalleryTab('all')}
                  className={`px-6 py-3 rounded-full font-semibold transition duration-300 ${
                    currentActiveTab === 'all' 
                      ? 'text-white shadow-lg transform scale-105' 
                      : 'text-gray-600 hover:text-gray-800 bg-white hover:shadow-md'
                  }`}
                  style={{
                    backgroundColor: currentActiveTab === 'all' ? colors.primary : '#FFFFFF',
                    borderColor: colors.primary,
                    border: currentActiveTab === 'all' ? 'none' : `2px solid ${colors.primary}20`
                  }}
                >
                  All Work
                  <span className="ml-2 text-sm opacity-75">
                    ({totalGalleryItems})
                  </span>
                </button>
                
                {/* Category Tabs */}
                {categories.map((category) => (
                  <button
                    key={category}
                    onClick={() => setActiveGalleryTab(category)}
                    className={`px-6 py-3 rounded-full font-semibold transition duration-300 ${
                      currentActiveTab === category 
                        ? 'text-white shadow-lg transform scale-105' 
                        : 'text-gray-600 hover:text-gray-800 bg-white hover:shadow-md'
                    }`}
                    style={{
                      backgroundColor: currentActiveTab === category ? colors.primary : '#FFFFFF',
                      borderColor: colors.primary,
                      border: currentActiveTab === category ? 'none' : `2px solid ${colors.primary}20`
                    }}
                  >
                    {category}
                    <span className="ml-2 text-sm opacity-75">
                      ({groupedItems[category].length})
                    </span>
                  </button>
                ))}
              </div>

              {/* Images Grid for Active Category */}
              {displayItems && displayItems.length > 0 && (
                <div className="grid md:grid-cols-3 lg:grid-cols-4 gap-6">
                  {displayItems.map((item: any) => (
                    <div 
                      key={item.id} 
                      className="relative group overflow-hidden rounded-xl shadow-lg hover:shadow-xl transition cursor-pointer"
                      onClick={() => setSelectedImageModal(item)}
                    >
                      <img 
                        src={item.url} 
                        alt={item.title || `${currentActiveTab} work example`}
                        className="w-full h-64 object-cover group-hover:scale-110 transition duration-300"
                      />
                      <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                        <div className="absolute bottom-0 left-0 right-0 p-4">
                          {item.title && (
                            <h4 className="text-white font-semibold text-lg mb-1">{item.title}</h4>
                          )}
                          {item.description && (
                            <p className="text-white/90 text-sm">{item.description}</p>
                          )}
                        </div>
                        
                        {/* Click to view larger indicator */}
                        <div className="absolute top-3 right-3">
                          <div className="bg-white/20 backdrop-blur-sm rounded-full p-2">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-white">
                              <circle cx="11" cy="11" r="8"/>
                              <path d="M21 21l-4.35-4.35"/>
                              <path d="M11 8v6"/>
                              <path d="M8 11h6"/>
                            </svg>
                          </div>
                        </div>
                      </div>
                      
                      {/* Service category badge */}
                      <div className="absolute top-3 left-3">
                        <span 
                          className="px-3 py-1 rounded-full text-xs font-semibold text-white"
                          style={{ backgroundColor: colors.accent }}
                        >
                          {item.category || 'General'}
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              )}

              {/* Call to action */}
              <div className="text-center mt-12">
                <p className="text-lg mb-6" style={{ color: colors.secondary, opacity: 0.8 }}>
                  Like what you see? Book your appointment today!
                </p>
                <a 
                  href={`/book/${business.slug}`} 
                  className="inline-block text-white px-8 py-3 rounded-full font-semibold hover:opacity-90 transition"
                  style={{ backgroundColor: colors.primary }}
                >
                  Get Started
                </a>
              </div>
            </div>
          </section>
        )
      })()}

      {/* Reviews Section - Now with real data and moved before Contact */}
      {reviews.length > 0 && (
        <section id="reviews" className="py-24 relative overflow-hidden">
          {/* Background decoration */}
          <div className="absolute inset-0">
            <div className="absolute top-1/3 left-1/5 w-64 h-64 bg-gradient-to-br from-purple-100 to-pink-50 rounded-full blur-3xl opacity-60"></div>
            <div className="absolute bottom-1/3 right-1/5 w-80 h-80 bg-gradient-to-br from-blue-50 to-indigo-100 rounded-full blur-3xl opacity-60"></div>
          </div>
          
          <div className="container mx-auto px-6 relative z-10">
            <div className="text-center mb-16">
              <h2 className="text-5xl font-black mb-6" style={{ color: colors.secondary }}>Customer Reviews</h2>
              <p className="text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed">
                See what our customers have to say about their experience
              </p>
              <div className="mt-6">
                <div className="flex items-center justify-center gap-2">
                  <div className="flex text-yellow-400">
                    {[...Array(5)].map((_, i) => (
                      <Star key={i} size={24} className="fill-current" />
                    ))}
                  </div>
                  <span className="text-lg font-semibold text-gray-700">
                    {(reviews.reduce((acc, r) => acc + r.rating, 0) / reviews.length).toFixed(1)} out of 5
                  </span>
                  <span className="text-gray-500">({reviews.length} reviews)</span>
                </div>
              </div>
            </div>

            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-7xl mx-auto">
              {reviews.slice(0, 6).map((review: any) => (
                <div key={review.id} className="group relative bg-white/80 backdrop-blur-sm rounded-3xl shadow-xl hover:shadow-2xl p-8 border border-white/20 hover:border-white/40 transform hover:-translate-y-2 transition duration-500">
                  <div className="absolute top-0 left-0 w-full h-1 rounded-t-3xl" style={{ background: `linear-gradient(90deg, ${colors.primary} 0%, ${colors.accent} 100%)` }}></div>
                  
                  <div className="flex items-center mb-6">
                    <div className="flex text-yellow-400">
                      {[...Array(5)].map((_, i) => (
                        <Star 
                          key={i} 
                          size={22} 
                          className={`${i < review.rating ? 'fill-current' : ''} drop-shadow-sm`} 
                        />
                      ))}
                    </div>
                  </div>
                  
                  <div className="relative mb-6">
                    <svg className="absolute -top-2 -left-2 w-8 h-8 text-gray-200" fill="currentColor" viewBox="0 0 32 32">
                      <path d="M7.5 14.5c0-3.3 2.7-6 6-6s6 2.7 6 6c0 3.3-2.7 6-6 6-0.8 0-1.5-0.2-2.2-0.5L7.5 22v-3.8c-1.8-1.3-3-3.4-3-5.7z"/>
                    </svg>
                    <p className="text-gray-700 text-lg leading-relaxed italic pl-6 line-clamp-4">
                      "{review.comment || 'Great experience!'}"
                    </p>
                  </div>
                  
                  <div className="border-t border-gray-100 pt-4">
                    <div className="flex items-center justify-between">
                      <div>
                        <div className="font-bold text-gray-900 text-lg">
                          {review.customer?.name || 'Anonymous'}
                        </div>
                        <div className="text-sm text-gray-500">
                          {new Date(review.createdAt).toLocaleDateString('en-US', { 
                            year: 'numeric', 
                            month: 'long', 
                            day: 'numeric' 
                          })}
                        </div>
                      </div>
                      <div className="w-12 h-12 rounded-full flex items-center justify-center" style={{ backgroundColor: colors.primary + '20' }}>
                        {review.customer?.avatar ? (
                          <img src={review.customer.avatar} alt={review.customer.name} className="w-full h-full rounded-full object-cover" />
                        ) : (
                          <span className="text-2xl font-bold" style={{ color: colors.primary }}>
                            {(review.customer?.name || 'A')[0].toUpperCase()}
                          </span>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>

            {reviews.length > 6 && (
              <div className="text-center mt-12">
                <p className="text-gray-600 mb-4">And many more satisfied customers!</p>
              </div>
            )}
          </div>
        </section>
      )}

      {/* Booking Modal */}
      {showBookingModal && (
        <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-3xl shadow-2xl max-w-5xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-8 relative">
              {/* Close button */}
              <button
                onClick={() => {
                  setShowBookingModal(false)
                  setBookingStep(1)
                  setSelectedService(null)
                  setSelectedPackage(null)
                  setSelectedStaff(null)
                  setSelectedDate('')
                  setSelectedTime('')
                }}
                className="absolute top-6 right-6 text-gray-400 hover:text-gray-600 transition"
              >
                <X size={24} />
              </button>

              {/* Modal Header */}
              <div className="text-center mb-8">
                <h2 className="text-3xl font-black mb-2" style={{ color: colors.secondary }}>
                  {selectedPackage ? 'Book Package' : selectedService ? 'Book Service' : 'Book Your Appointment'}
                </h2>
                <p className="text-gray-600">
                  {selectedPackage 
                    ? `Booking: ${selectedPackage.name}` 
                    : selectedService 
                    ? `Booking: ${selectedService.name}`
                    : 'Schedule your visit in just a few clicks'}
                </p>
              </div>
              {/* Step 1: Select Service (skip if service or package is already selected) */}
              {bookingStep === 1 && !selectedPackage && !selectedService && (
                <div>
                  <div className="flex items-center mb-8">
                    <div className="flex-1 h-2 rounded-full" style={{ backgroundColor: colors.primary }}></div>
                    <div className="mx-6 text-white rounded-full w-12 h-12 flex items-center justify-center font-bold text-lg" style={{ backgroundColor: colors.primary }}>
                      1
                    </div>
                    <div className="flex-1 h-2 bg-gray-200 rounded-full"></div>
                  </div>
                  
                  <h3 className="text-3xl font-black mb-6" style={{ color: colors.secondary }}>
                    {selectedServiceCategory === 'packages' ? 'Select a Package' : 'Select a Service'}
                  </h3>
                  
                  {(() => {
                    // Get unique categories
                    const categories = Array.from(new Set(business.services?.map((s: any) => s.category || 'General'))) as string[]
                    
                    // Check if packages exist and should be shown
                    const hasPackages = business.enablePackagesModule && business.packages && business.packages.length > 0
                    
                    // Filter services or packages based on selection
                    const filteredServices = selectedServiceCategory === 'packages' 
                      ? [] // We'll handle packages separately
                      : business.services?.filter((service: any) => {
                          const matchesSearch = service.name.toLowerCase().includes(serviceSearchTerm.toLowerCase()) ||
                                              service.description?.toLowerCase().includes(serviceSearchTerm.toLowerCase())
                          const matchesCategory = selectedServiceCategory === 'all' || 
                                                (service.category || 'General') === selectedServiceCategory
                          return matchesSearch && matchesCategory
                        }) || []
                    
                    // Filter packages if packages category is selected
                    const filteredPackages = selectedServiceCategory === 'packages'
                      ? business.packages?.filter((pkg: any) => {
                          return pkg.name.toLowerCase().includes(serviceSearchTerm.toLowerCase()) ||
                                 pkg.description?.toLowerCase().includes(serviceSearchTerm.toLowerCase())
                        }) || []
                      : []

                    return (
                      <>
                        {/* Search and Filter Bar */}
                        <div className="mb-6 space-y-4">
                          {/* Search Input */}
                          <div className="relative">
                            <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
                            <input
                              type="text"
                              placeholder="Search services..."
                              value={serviceSearchTerm}
                              onChange={(e) => setServiceSearchTerm(e.target.value)}
                              className="w-full pl-12 pr-4 py-3 border-2 border-gray-200 rounded-xl focus:border-2 focus:ring-0 focus:outline-none transition"
                              style={{ focusBorderColor: colors.primary }}
                            />
                          </div>
                          
                          {/* Category Filters */}
                          {(categories.length > 1 || hasPackages) && (
                            <div className="flex flex-wrap gap-2">
                              <button
                                onClick={() => setSelectedServiceCategory('all')}
                                className={`px-4 py-2 rounded-lg font-medium transition duration-200 ${
                                  selectedServiceCategory === 'all'
                                    ? 'text-white shadow-md'
                                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                                }`}
                                style={{
                                  backgroundColor: selectedServiceCategory === 'all' ? colors.primary : undefined
                                }}
                              >
                                All Services
                              </button>
                              {hasPackages && (
                                <button
                                  onClick={() => setSelectedServiceCategory('packages')}
                                  className={`px-4 py-2 rounded-lg font-medium transition duration-200 flex items-center gap-2 ${
                                    selectedServiceCategory === 'packages'
                                      ? 'text-white shadow-md'
                                      : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                                  }`}
                                  style={{
                                    backgroundColor: selectedServiceCategory === 'packages' ? colors.accent : undefined
                                  }}
                                >
                                  <span>📦</span>
                                  <span>Packages</span>
                                  {business.packages?.length > 0 && (
                                    <span className={`ml-1 px-2 py-0.5 rounded-full text-xs ${
                                      selectedServiceCategory === 'packages' ? 'bg-white/20' : 'bg-gray-200'
                                    }`}>
                                      {business.packages.length}
                                    </span>
                                  )}
                                </button>
                              )}
                              {categories.map(category => (
                                <button
                                  key={category}
                                  onClick={() => setSelectedServiceCategory(category)}
                                  className={`px-4 py-2 rounded-lg font-medium transition duration-200 ${
                                    selectedServiceCategory === category
                                      ? 'text-white shadow-md'
                                      : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                                  }`}
                                  style={{
                                    backgroundColor: selectedServiceCategory === category ? colors.primary : undefined
                                  }}
                                >
                                  {category}
                                </button>
                              ))}
                            </div>
                          )}
                        </div>

                        {/* Services or Packages Grid with Scroll */}
                        <div className="space-y-3 max-h-[400px] overflow-y-auto pr-2 custom-scrollbar">
                          {selectedServiceCategory === 'packages' ? (
                            // Show Packages
                            filteredPackages.length > 0 ? (
                              <div className="grid gap-3">
                                {filteredPackages.map((pkg: any) => (
                                  <div 
                                    key={pkg.id}
                                    onClick={() => {
                                      setSelectedPackage(pkg)
                                      // Use the first service in the package for duration/slots
                                      const firstService = pkg.services?.[0]?.service || pkg
                                      setSelectedService(firstService)
                                      // Check if staff module is enabled
                                      if (business.enableStaffModule) {
                                        setAvailableStaff(business.staff || [])
                                        setBookingStep(2) // Go to staff selection
                                      } else {
                                        setBookingStep(3) // Go directly to date/time selection
                                      }
                                    }}
                                    className={`border-2 rounded-xl p-4 cursor-pointer transition duration-200 hover:shadow-md ${
                                      selectedPackage?.id === pkg.id 
                                        ? 'shadow-lg transform scale-[1.02]' 
                                        : 'hover:border-gray-300'
                                    }`}
                                    style={{
                                      borderColor: selectedPackage?.id === pkg.id ? colors.accent : '#e5e7eb',
                                      backgroundColor: selectedPackage?.id === pkg.id ? colors.accent + '08' : 'white',
                                    }}
                                  >
                                    <div className="flex items-start justify-between">
                                      <div className="flex-1 pr-4">
                                        <div className="flex items-start gap-3">
                                          <div 
                                            className="w-10 h-10 rounded-lg flex items-center justify-center flex-shrink-0"
                                            style={{ 
                                              background: `linear-gradient(135deg, ${colors.accent}20 0%, ${colors.primary}20 100%)`,
                                              color: colors.accent 
                                            }}
                                          >
                                            <span className="text-lg">📦</span>
                                          </div>
                                          <div className="flex-1">
                                            <h4 className="font-semibold text-base text-gray-900">{pkg.name}</h4>
                                            {pkg.description && (
                                              <p className="text-gray-600 text-sm mt-1 line-clamp-2">{pkg.description}</p>
                                            )}
                                            <div className="mt-2 space-y-1">
                                              {pkg.services?.slice(0, 3).map((ps: any) => (
                                                <div key={ps.serviceId} className="flex items-center text-xs text-gray-500">
                                                  <CheckCircle size={12} className="mr-1 text-green-500" />
                                                  {ps.quantity > 1 && `${ps.quantity}x `}
                                                  {ps.service?.name}
                                                </div>
                                              ))}
                                              {pkg.services?.length > 3 && (
                                                <span className="text-xs text-gray-400">
                                                  +{pkg.services.length - 3} more services
                                                </span>
                                              )}
                                            </div>
                                            <div className="flex items-center gap-4 mt-2">
                                              <span className="flex items-center text-xs text-gray-500">
                                                <Clock size={14} className="mr-1" style={{ color: colors.accent }} />
                                                {pkg.duration} min total
                                              </span>
                                              {pkg.validityDays && (
                                                <span className="text-xs text-gray-500">
                                                  Valid {pkg.validityDays} days
                                                </span>
                                              )}
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                      <div className="text-right flex flex-col items-end">
                                        {pkg.discount && pkg.discount > 0 && (
                                          <span className="text-xs font-bold text-green-600 mb-1">
                                            {pkg.discount}% OFF
                                          </span>
                                        )}
                                        <div className="text-2xl font-black" style={{ color: colors.accent }}>
                                          ${pkg.price}
                                        </div>
                                        {pkg.originalPrice && pkg.originalPrice > pkg.price && (
                                          <span className="text-xs text-gray-500 line-through">
                                            ${pkg.originalPrice}
                                          </span>
                                        )}
                                        <ChevronRight 
                                          className="text-gray-400 mt-1" 
                                          size={20}
                                        />
                                      </div>
                                    </div>
                                  </div>
                                ))}
                              </div>
                            ) : (
                              <div className="text-center py-12 text-gray-500">
                                <span className="text-4xl mb-4 block">📦</span>
                                <p>No packages found matching your search</p>
                              </div>
                            )
                          ) : (
                            // Show Services
                            filteredServices.length > 0 ? (
                              <div className="grid gap-3">
                                {filteredServices.map((service: any) => (
                                <div 
                                  key={service.id}
                                  onClick={() => {
                                    setSelectedService(service)
                                    // Check if staff module is enabled
                                    if (business.enableStaffModule) {
                                      // Load staff for this service
                                      fetchStaffForService(service.id)
                                      setBookingStep(2) // Go to staff selection
                                    } else {
                                      setBookingStep(3) // Go directly to date/time selection
                                    }
                                  }}
                                  className={`border-2 rounded-xl p-4 cursor-pointer transition duration-200 hover:shadow-md ${
                                    selectedService?.id === service.id 
                                      ? 'shadow-lg transform scale-[1.02]' 
                                      : 'hover:border-gray-300'
                                  }`}
                                  style={{
                                    borderColor: selectedService?.id === service.id ? colors.primary : '#e5e7eb',
                                    backgroundColor: selectedService?.id === service.id ? colors.primary + '08' : 'white',
                                  }}
                                >
                                  <div className="flex items-center justify-between">
                                    <div className="flex-1 pr-4">
                                      <div className="flex items-start gap-3">
                                        <div 
                                          className="w-10 h-10 rounded-lg flex items-center justify-center flex-shrink-0"
                                          style={{ 
                                            background: `linear-gradient(135deg, ${colors.primary}20 0%, ${colors.accent}20 100%)`,
                                            color: colors.primary 
                                          }}
                                        >
                                          <span className="font-bold">{service.name.charAt(0)}</span>
                                        </div>
                                        <div className="flex-1">
                                          <h4 className="font-semibold text-base text-gray-900">{service.name}</h4>
                                          <p className="text-gray-600 text-sm mt-1 line-clamp-1">{service.description}</p>
                                          <div className="flex items-center gap-4 mt-2">
                                            <span className="flex items-center text-xs text-gray-500">
                                              <Clock size={14} className="mr-1" style={{ color: colors.primary }} />
                                              {service.duration} min
                                            </span>
                                            {service.category && (
                                              <span className="text-xs px-2 py-1 rounded-md bg-gray-100 text-gray-600">
                                                {service.category}
                                              </span>
                                            )}
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                    <div className="text-right flex flex-col items-end">
                                      <div className="text-2xl font-black" style={{ color: colors.primary }}>
                                        ${service.price}
                                      </div>
                                      <ChevronRight 
                                        className="text-gray-400 mt-1" 
                                        size={20}
                                      />
                                    </div>
                                  </div>
                                </div>
                              ))}
                            </div>
                          ) : (
                            <div className="text-center py-12 text-gray-500">
                              <Grid3X3 size={48} className="mx-auto mb-4 opacity-30" />
                              <p>No services found matching your search</p>
                            </div>
                          )
                        )}
                        </div>

                        {/* Item Count */}
                        {selectedServiceCategory === 'packages' ? (
                          filteredPackages.length > 0 && (
                            <div className="mt-4 text-center text-sm text-gray-500">
                              Showing {filteredPackages.length} of {business.packages?.length || 0} packages
                            </div>
                          )
                        ) : (
                          filteredServices.length > 0 && (
                            <div className="mt-4 text-center text-sm text-gray-500">
                              Showing {filteredServices.length} of {business.services?.length || 0} services
                            </div>
                          )
                        )}
                      </>
                    )
                  })()}
                  
                  <style jsx>{`
                    .custom-scrollbar::-webkit-scrollbar {
                      width: 6px;
                    }
                    .custom-scrollbar::-webkit-scrollbar-track {
                      background: #f1f1f1;
                      border-radius: 10px;
                    }
                    .custom-scrollbar::-webkit-scrollbar-thumb {
                      background: ${colors.primary}40;
                      border-radius: 10px;
                    }
                    .custom-scrollbar::-webkit-scrollbar-thumb:hover {
                      background: ${colors.primary}60;
                    }
                  `}</style>
                </div>
              )}

              {/* Step 2: Select Staff (if module is enabled) */}
              {bookingStep === 2 && business.enableStaffModule && (
                <div>
                  <div className="flex items-center mb-8">
                    <div className="flex-1 h-2 rounded-full" style={{ backgroundColor: colors.primary }}></div>
                    <div className="mx-6 text-white rounded-full w-12 h-12 flex items-center justify-center font-bold text-lg" style={{ backgroundColor: colors.primary }}>
                      2
                    </div>
                    <div className="flex-1 h-2 bg-gray-200 rounded-full"></div>
                  </div>
                  
                  <h3 className="text-3xl font-black mb-6" style={{ color: colors.secondary }}>Select Professional</h3>
                  
                  {console.log('Rendering staff selection. Available staff:', availableStaff)}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 max-h-[400px] overflow-y-auto pr-2 custom-scrollbar">
                    {availableStaff.map((staff: any) => (
                      <div
                        key={staff.id}
                        onClick={() => {
                          setSelectedStaff(staff)
                          setBookingStep(3) // Go to date/time selection
                        }}
                        className={`border-2 rounded-xl p-4 cursor-pointer transition duration-200 hover:shadow-md ${
                          selectedStaff?.id === staff.id
                            ? 'shadow-lg transform scale-[1.02]'
                            : 'hover:border-gray-300'
                        }`}
                        style={{
                          borderColor: selectedStaff?.id === staff.id ? colors.primary : '#e5e7eb',
                          backgroundColor: selectedStaff?.id === staff.id ? colors.primary + '08' : 'white',
                        }}
                      >
                        <div className="flex items-start gap-4">
                          {staff.photo ? (
                            <img
                              src={staff.photo}
                              alt={staff.name}
                              className="w-16 h-16 rounded-lg object-cover"
                            />
                          ) : (
                            <div 
                              className="w-16 h-16 rounded-lg flex items-center justify-center"
                              style={{ backgroundColor: colors.primary + '20', color: colors.primary }}
                            >
                              <span className="text-xl font-bold">{staff.name.charAt(0)}</span>
                            </div>
                          )}
                          <div className="flex-1">
                            <h4 className="font-semibold text-lg" style={{ color: colors.secondary }}>
                              {staff.name}
                            </h4>
                            {staff.bio && (
                              <p className="text-sm text-gray-600 mt-1 line-clamp-2">{staff.bio}</p>
                            )}
                            {staff.rating && staff.totalReviews > 0 && (
                              <div className="flex items-center gap-1 mt-2">
                                <Star size={16} className="text-yellow-400 fill-current" />
                                <span className="text-sm font-medium">{staff.rating.toFixed(1)}</span>
                                <span className="text-xs text-gray-500">({staff.totalReviews} reviews)</span>
                              </div>
                            )}
                            {staff.specialties && staff.specialties.length > 0 && (
                              <div className="flex flex-wrap gap-1 mt-2">
                                {staff.specialties.slice(0, 2).map((specialty: string, idx: number) => (
                                  <span 
                                    key={idx}
                                    className="text-xs px-2 py-1 rounded-full"
                                    style={{ backgroundColor: colors.primary + '15', color: colors.primary }}
                                  >
                                    {specialty}
                                  </span>
                                ))}
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>

                  {availableStaff.length === 0 && (
                    <div className="text-center py-12 text-gray-500">
                      <p>No professionals available for this service</p>
                    </div>
                  )}

                  <div className="mt-6 flex justify-between">
                    <button
                      onClick={() => setBookingStep(1)}
                      className="px-6 py-3 border-2 border-gray-200 rounded-xl font-semibold hover:bg-gray-50 transition"
                    >
                      Back
                    </button>
                  </div>
                </div>
              )}

              {/* Step 3: Select Date & Time */}
              {bookingStep === 3 && (
                <div>
                  <div className="flex items-center mb-8">
                    <div className="flex-1 h-2 rounded-full" style={{ backgroundColor: colors.primary }}></div>
                    <div className="mx-6 text-white rounded-full w-12 h-12 flex items-center justify-center font-bold text-lg" style={{ backgroundColor: colors.primary }}>
                      {business.enableStaffModule ? 3 : 2}
                    </div>
                    <div className="flex-1 h-2 bg-gray-200 rounded-full"></div>
                  </div>
                  
                  <h3 className="text-3xl font-black mb-8" style={{ color: colors.secondary }}>Select Date & Time</h3>
                  
                  <div className="space-y-6">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Select Date
                      </label>
                      <input 
                        type="date"
                        min={new Date().toISOString().split('T')[0]}
                        value={selectedDate}
                        onChange={(e) => setSelectedDate(e.target.value)}
                        className="w-full p-4 border-2 border-gray-200 rounded-xl focus:border-2 focus:ring-0 focus:outline-none transition"
                        style={{ focusBorderColor: colors.primary }}
                      />
                    </div>

                    {selectedDate && (
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Available Time Slots
                        </label>
                        {isLoadingSlots ? (
                          <div className="text-center py-4">Loading available times...</div>
                        ) : availableSlots.length > 0 ? (
                          <div className="grid grid-cols-4 gap-2">
                            {availableSlots.map(time => (
                              <button
                                key={time}
                                type="button"
                                onClick={() => setSelectedTime(time)}
                                className={`p-3 rounded-xl border-2 font-semibold transition duration-200 ${
                                  selectedTime === time 
                                    ? 'text-white shadow-lg transform scale-105' 
                                    : 'border-gray-200 hover:border-gray-300 hover:shadow-md'
                                }`}
                                style={{
                                  backgroundColor: selectedTime === time ? colors.primary : undefined,
                                  borderColor: selectedTime === time ? colors.primary : undefined
                                }}
                              >
                                {time}
                              </button>
                            ))}
                          </div>
                        ) : (
                          <div className="text-center py-4 text-gray-500">
                            No available time slots for this date
                          </div>
                        )}
                      </div>
                    )}

                    <div className="flex gap-4">
                      <button 
                        type="button"
                        onClick={() => setBookingStep(business.enableStaffModule ? 2 : 1)}
                        className="flex-1 border-2 text-gray-700 py-4 rounded-xl font-bold hover:bg-gray-50 transition duration-200"
                        style={{ borderColor: colors.primary, color: colors.primary }}
                      >
                        Back
                      </button>
                      <button 
                        type="button"
                        onClick={() => setBookingStep(4)}
                        disabled={!selectedDate || !selectedTime}
                        className="flex-1 text-white py-4 rounded-xl font-bold hover:opacity-90 transition duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                        style={{ backgroundColor: colors.primary }}
                      >
                        Continue
                      </button>
                    </div>
                  </div>
                </div>
              )}

              {/* Step 4: Contact Information */}
              {bookingStep === 4 && (
                <div>
                  <div className="flex items-center mb-8">
                    <div className="flex-1 h-2 rounded-full" style={{ backgroundColor: colors.primary }}></div>
                    <div className="mx-6 text-white rounded-full w-12 h-12 flex items-center justify-center font-bold text-lg" style={{ backgroundColor: colors.primary }}>
                      {business.enableStaffModule ? 4 : 3}
                    </div>
                    <div className="flex-1 h-2 rounded-full" style={{ backgroundColor: colors.primary }}></div>
                  </div>
                  
                  <h3 className="text-3xl font-black mb-8" style={{ color: colors.secondary }}>Contact Information</h3>
                  
                  <form onSubmit={handleBookingSubmit} className="space-y-4">
                    <div className="grid md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Full Name *
                        </label>
                        <input 
                          type="text"
                          required
                          value={bookingData.customerName}
                          onChange={(e) => setBookingData({...bookingData, customerName: e.target.value})}
                          className="w-full p-4 border-2 border-gray-200 rounded-xl focus:border-2 focus:ring-0 focus:outline-none transition"
                          style={{ focusBorderColor: colors.primary }}
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Phone Number *
                        </label>
                        <input 
                          type="tel"
                          required
                          minLength={7}
                          value={bookingData.customerPhone}
                          onChange={(e) => setBookingData({...bookingData, customerPhone: e.target.value})}
                          className="w-full p-4 border-2 border-gray-200 rounded-xl focus:border-2 focus:ring-0 focus:outline-none transition"
                          style={{ focusBorderColor: colors.primary }}
                          placeholder="Enter at least 7 digits"
                        />
                      </div>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Email Address *
                      </label>
                      <input 
                        type="email"
                        required
                        value={bookingData.customerEmail}
                        onChange={(e) => setBookingData({...bookingData, customerEmail: e.target.value})}
                        className="w-full p-4 border-2 border-gray-200 rounded-xl focus:border-2 focus:ring-0 focus:outline-none transition"
                        style={{ focusBorderColor: colors.primary }}
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Special Notes (Optional)
                      </label>
                      <textarea 
                        rows={3}
                        value={bookingData.notes}
                        onChange={(e) => setBookingData({...bookingData, notes: e.target.value})}
                        className="w-full p-4 border-2 border-gray-200 rounded-xl focus:border-2 focus:ring-0 focus:outline-none transition"
                        style={{ focusBorderColor: colors.primary }}
                        placeholder="Any special requests or information..."
                      />
                    </div>
                    
                    <div className="p-6 rounded-2xl border-2" style={{ backgroundColor: colors.primary + '05', borderColor: colors.primary + '20' }}>
                      <h4 className="font-black text-xl mb-4" style={{ color: colors.secondary }}>Booking Summary</h4>
                      <div className="space-y-1 text-sm">
                        <div className="flex justify-between">
                          <span className="text-gray-600">Service:</span>
                          <span className="font-medium">{selectedService?.name}</span>
                        </div>
                        {selectedStaff && (
                          <div className="flex justify-between">
                            <span className="text-gray-600">Professional:</span>
                            <span className="font-medium">{selectedStaff.name}</span>
                          </div>
                        )}
                        <div className="flex justify-between">
                          <span className="text-gray-600">Date:</span>
                          <span className="font-medium">{new Date(selectedDate).toLocaleDateString()}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">Time:</span>
                          <span className="font-medium">{selectedTime}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">Duration:</span>
                          <span className="font-medium">{selectedService?.duration} minutes</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">Price:</span>
                          <span className="font-bold text-blue-600">${selectedService?.price}</span>
                        </div>
                      </div>
                    </div>

                    <div className="flex gap-4">
                      <button 
                        type="button"
                        onClick={() => setBookingStep(3)}
                        className="flex-1 border border-gray-300 text-gray-700 py-3 rounded-lg font-semibold hover:bg-gray-50 transition"
                      >
                        Back
                      </button>
                      <button 
                        type="submit"
                        disabled={isSubmitting}
                        className="flex-1 bg-blue-600 text-white py-3 rounded-lg font-semibold hover:bg-blue-700 transition disabled:opacity-50 disabled:cursor-not-allowed"
                      >
                        {isSubmitting ? 'Processing...' : 'Confirm Booking'}
                      </button>
                    </div>
                  </form>
                </div>
              )}

              {/* Success Step */}
              {bookingStep === 5 && bookingSuccess && (
                <div className="text-center py-12">
                  <div className="mb-6">
                    <div className="mx-auto bg-green-100 rounded-full w-20 h-20 flex items-center justify-center">
                      <Check className="text-green-600" size={40} />
                    </div>
                  </div>
                  
                  <h3 className="text-3xl font-bold text-gray-900 mb-4">Booking Confirmed!</h3>
                  <p className="text-lg text-gray-600 mb-8">
                    Your appointment has been successfully booked.
                  </p>
                  
                  <div className="bg-gray-50 p-6 rounded-lg max-w-md mx-auto mb-8">
                    <h4 className="font-semibold mb-4">Appointment Details</h4>
                    <div className="space-y-2 text-left">
                      <div className="flex justify-between">
                        <span className="text-gray-600">{selectedPackage ? 'Package:' : 'Service:'}</span>
                        <span className="font-medium">{selectedPackage?.name || selectedService?.name}</span>
                      </div>
                      {selectedStaff && (
                        <div className="flex justify-between">
                          <span className="text-gray-600">Professional:</span>
                          <span className="font-medium">{selectedStaff.name}</span>
                        </div>
                      )}
                      <div className="flex justify-between">
                        <span className="text-gray-600">Date:</span>
                        <span className="font-medium">{new Date(selectedDate).toLocaleDateString()}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-600">Time:</span>
                        <span className="font-medium">{selectedTime}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-600">Price:</span>
                        <span className="font-bold text-blue-600">${selectedService?.price}</span>
                      </div>
                    </div>
                  </div>
                  
                  <p className="text-gray-600 mb-6">
                    A confirmation email has been sent to {bookingData.customerEmail}
                  </p>
                  
                  <button 
                    onClick={() => {
                      setBookingStep(1)
                      setSelectedService(null)
                      setSelectedStaff(null)
                      setAvailableStaff([])
                      setSelectedDate('')
                      setSelectedTime('')
                      setBookingData({ customerName: '', customerEmail: '', customerPhone: '', notes: '' })
                      setBookingSuccess(false)
                    }}
                    className="bg-blue-600 text-white px-8 py-3 rounded-lg font-semibold hover:bg-blue-700 transition"
                  >
                    Book Another Appointment
                  </button>
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Contact Section */}
      <section id="contact" className="py-24 relative overflow-hidden" style={{ background: `linear-gradient(135deg, ${colors.primary}05 0%, ${colors.accent}05 100%)` }}>
        {/* Background decoration */}
        <div className="absolute inset-0">
          <div className="absolute top-1/4 left-1/6 w-72 h-72 bg-white/5 rounded-full blur-3xl animate-pulse"></div>
          <div className="absolute bottom-1/4 right-1/6 w-96 h-96 bg-white/3 rounded-full blur-3xl animate-pulse delay-500"></div>
        </div>
        
        <div className="container mx-auto px-6 relative z-10">
          <div className="text-center mb-16">
            <h2 className="text-5xl font-black mb-6" style={{ color: colors.secondary }}>Get In Touch</h2>
            <p className="text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed">
              Visit us or reach out for any questions about our services
            </p>
          </div>

          <div className="grid md:grid-cols-2 gap-16 max-w-7xl mx-auto">
            <div className="space-y-8">
              <div className="flex items-start space-x-6">
                <div className="p-4 rounded-2xl" style={{ background: `linear-gradient(135deg, ${colors.primary} 0%, ${colors.accent} 100%)` }}>
                  <MapPin className="text-white" size={28} />
                </div>
                <div>
                  <h3 className="font-black text-xl mb-2" style={{ color: colors.secondary }}>Address</h3>
                  <p className="text-gray-600">
                    {business.address || 'Address not available'}<br />
                    {business.city}, {business.state} {business.zipCode}
                  </p>
                </div>
              </div>

              <div className="flex items-start space-x-6">
                <div className="p-4 rounded-2xl" style={{ background: `linear-gradient(135deg, ${colors.primary} 0%, ${colors.accent} 100%)` }}>
                  <Phone className="text-white" size={28} />
                </div>
                <div>
                  <h3 className="font-black text-xl mb-2" style={{ color: colors.secondary }}>Phone</h3>
                  <p className="text-gray-600">{business.phone || 'Phone not available'}</p>
                </div>
              </div>

              <div className="flex items-start space-x-6">
                <div className="p-4 rounded-2xl" style={{ background: `linear-gradient(135deg, ${colors.primary} 0%, ${colors.accent} 100%)` }}>
                  <Mail className="text-white" size={28} />
                </div>
                <div>
                  <h3 className="font-black text-xl mb-2" style={{ color: colors.secondary }}>Email</h3>
                  <p className="text-gray-600">{business.email || 'Email not available'}</p>
                </div>
              </div>

              {business.socialLinks && (
                <div className="flex items-start space-x-6">
                  <div className="p-4 rounded-2xl" style={{ background: `linear-gradient(135deg, ${colors.primary} 0%, ${colors.accent} 100%)` }}>
                    <MessageCircle className="text-white" size={28} />
                  </div>
                  <div>
                    <h3 className="font-black text-xl mb-4" style={{ color: colors.secondary }}>Follow Us</h3>
                    <div className="flex space-x-4">
                      {business.socialLinks.facebook && (
                        <a href={business.socialLinks.facebook} target="_blank" rel="noopener noreferrer" className="text-gray-600 hover:text-blue-600">
                          <Facebook size={24} />
                        </a>
                      )}
                      {business.socialLinks.instagram && (
                        <a href={business.socialLinks.instagram} target="_blank" rel="noopener noreferrer" className="text-gray-600 hover:text-pink-600">
                          <Instagram size={24} />
                        </a>
                      )}
                      {business.socialLinks.twitter && (
                        <a href={business.socialLinks.twitter} target="_blank" rel="noopener noreferrer" className="text-gray-600 hover:text-blue-400">
                          <Twitter size={24} />
                        </a>
                      )}
                    </div>
                  </div>
                </div>
              )}
            </div>

            <div>
              <div className="flex items-start space-x-6">
                <div className="p-4 rounded-2xl" style={{ background: `linear-gradient(135deg, ${colors.primary} 0%, ${colors.accent} 100%)` }}>
                  <Clock className="text-white" size={28} />
                </div>
                <div>
                  <h3 className="font-black text-xl mb-2" style={{ color: colors.secondary }}>Business Hours</h3>
                  <div className="space-y-0">
                    {(() => {
                      // Reorder to show Monday-Saturday, then Sunday
                      const reorderedHours = [
                        workingHours[1], // Monday
                        workingHours[2], // Tuesday
                        workingHours[3], // Wednesday
                        workingHours[4], // Thursday
                        workingHours[5], // Friday
                        workingHours[6], // Saturday
                        workingHours[0], // Sunday
                      ].filter(Boolean)
                      
                      return reorderedHours.map((hour: any, index: number) => (
                        <div key={hour.day} className="flex gap-4 py-0.5 text-sm">
                          <span className="font-medium text-gray-700 w-24">{hour.day}</span>
                          <span className={hour.hours === 'Closed' ? 'text-red-500' : 'text-gray-900'}>
                            {hour.hours}
                          </span>
                        </div>
                      ))
                    })()}
                  </div>
                  
                  {business.phone && (
                    <div className="mt-4">
                      <a 
                        href={`https://wa.me/${business.phone.replace(/\D/g, '')}`}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="inline-flex items-center gap-2 bg-gradient-to-r from-green-500 to-green-600 text-white px-4 py-2 rounded-full text-sm font-semibold hover:from-green-600 hover:to-green-700 transition duration-300 shadow-md hover:shadow-lg transform hover:-translate-y-0.5"
                      >
                        <MessageCircle size={16} />
                        <span>WhatsApp</span>
                      </a>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer className="relative overflow-hidden py-12" style={{ background: `linear-gradient(135deg, ${colors.secondary} 0%, ${colors.primary} 100%)` }}>
        {/* Background decoration */}
        <div className="absolute inset-0">
          <div className="absolute top-1/2 left-1/4 w-64 h-64 bg-white/5 rounded-full blur-3xl"></div>
          <div className="absolute bottom-1/4 right-1/3 w-80 h-80 bg-white/3 rounded-full blur-3xl"></div>
        </div>
        
        <div className="container mx-auto px-6 text-center relative z-10">
          <div className="mb-6">
            <h3 className="text-3xl font-black text-white mb-3">{business.name}</h3>
            <p className="text-white/90 text-lg font-medium">
              Thank you for choosing us for your service needs.
            </p>
            <p className="text-white/90 text-lg font-medium">
              We look forward to serving you!
            </p>
          </div>
          
          <div className="border-t border-white/20 pt-6">
            <p className="text-white/60 text-sm">
              &copy; {new Date().getFullYear()} {business.name}. All rights reserved.
            </p>
          </div>
        </div>
      </footer>

      {/* Image Modal */}
      {selectedImageModal && (
        <div 
          className="fixed inset-0 bg-black/80 backdrop-blur-sm flex items-center justify-center z-50 p-4"
          onClick={() => setSelectedImageModal(null)}
        >
          <div 
            className="relative max-w-4xl max-h-[90vh] bg-white rounded-2xl overflow-hidden shadow-2xl"
            onClick={(e) => e.stopPropagation()}
          >
            {/* Close button */}
            <button
              onClick={() => setSelectedImageModal(null)}
              className="absolute top-4 right-4 z-10 bg-black/20 hover:bg-black/40 text-white rounded-full p-2 transition backdrop-blur-sm"
            >
              <X size={24} />
            </button>

            {/* Image */}
            <img 
              src={selectedImageModal.url}
              alt={selectedImageModal.title || 'Gallery image'}
              className="w-full h-auto max-h-[70vh] object-contain"
            />

            {/* Image Info */}
            <div className="p-6">
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  {selectedImageModal.title && (
                    <h3 className="text-2xl font-bold text-gray-900 mb-2">
                      {selectedImageModal.title}
                    </h3>
                  )}
                  {selectedImageModal.description && (
                    <p className="text-gray-600 mb-4">
                      {selectedImageModal.description}
                    </p>
                  )}
                  <div className="flex items-center gap-4">
                    <span 
                      className="px-4 py-2 rounded-full text-sm font-semibold text-white"
                      style={{ backgroundColor: colors.accent }}
                    >
                      {selectedImageModal.category || 'General'}
                    </span>
                    {selectedImageModal.createdAt && (
                      <span className="text-sm text-gray-500">
                        Added {new Date(selectedImageModal.createdAt).toLocaleDateString()}
                      </span>
                    )}
                  </div>
                </div>
              </div>
              
              {/* Action buttons */}
              <div className="flex gap-3 mt-6">
                <a 
                  href={`/book/${business.slug}`} 
                  className="flex-1 text-center text-white px-6 py-3 rounded-lg font-semibold hover:opacity-90 transition"
                  style={{ backgroundColor: colors.primary }}
                  onClick={() => setSelectedImageModal(null)}
                >
                  Book This Service
                </a>
                <button
                  onClick={() => setSelectedImageModal(null)}
                  className="px-6 py-3 border-2 rounded-lg font-semibold hover:bg-gray-50 transition"
                  style={{ borderColor: colors.primary, color: colors.primary }}
                >
                  Close
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Package Reserve Modal */}
      {showPackageReserveModal && selectedPackage && (
        <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-3xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-8 relative">
              {/* Close button */}
              <button
                onClick={() => {
                  setShowPackageReserveModal(false)
                  setSelectedPackage(null)
                  setBookingData({
                    customerName: '',
                    customerEmail: '',
                    customerPhone: '',
                    notes: ''
                  })
                }}
                className="absolute top-6 right-6 text-gray-400 hover:text-gray-600 transition"
              >
                <X size={24} />
              </button>

              <div className="text-center mb-8">
                <h2 className="text-3xl font-bold mb-2" style={{ color: colors.primary }}>
                  Reserve Package
                </h2>
                <p className="text-gray-600">
                  Reserve now and pay later to secure your package
                </p>
              </div>

              {/* Package Details */}
              <div className="bg-gray-50 rounded-xl p-6 mb-6">
                <h3 className="font-bold text-lg mb-3">{selectedPackage.name}</h3>
                {selectedPackage.description && (
                  <p className="text-gray-600 text-sm mb-3">{selectedPackage.description}</p>
                )}
                <div className="flex items-center justify-between">
                  <div>
                    <span className="text-sm text-gray-500">Sessions included:</span>
                    <span className="ml-2 font-semibold">{selectedPackage.sessionCount || 1}</span>
                  </div>
                  <div className="text-2xl font-bold" style={{ color: colors.primary }}>
                    ${selectedPackage.price}
                  </div>
                </div>
                {selectedPackage.validityDays && (
                  <div className="mt-3 text-sm text-gray-500">
                    Valid for {selectedPackage.validityDays} days after activation
                  </div>
                )}
              </div>

              {/* Reservation Form */}
              <form onSubmit={handlePackageReserve}>
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Full Name *
                    </label>
                    <input
                      type="text"
                      required
                      value={reservationData.name}
                      onChange={(e) => setReservationData({ ...reservationData, name: e.target.value })}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="John Doe"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Email Address *
                    </label>
                    <input
                      type="email"
                      required
                      value={reservationData.email}
                      onChange={(e) => setReservationData({ ...reservationData, email: e.target.value })}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="john@example.com"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Phone Number
                    </label>
                    <input
                      type="tel"
                      value={reservationData.phone}
                      onChange={(e) => setReservationData({ ...reservationData, phone: e.target.value })}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="+1 (555) 000-0000"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Notes (Optional)
                    </label>
                    <textarea
                      value={reservationData.notes}
                      onChange={(e) => setReservationData({ ...reservationData, notes: e.target.value })}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      rows={3}
                      placeholder="Any special requests or information..."
                    />
                  </div>

                  {/* Payment Information */}
                  <div className="bg-blue-50 rounded-lg p-4">
                    <div className="flex items-start">
                      <Info className="text-blue-600 mr-3 mt-1" size={20} />
                      <div className="text-sm text-gray-700">
                        <p className="font-semibold mb-1">Payment Process:</p>
                        <ol className="list-decimal list-inside space-y-1">
                          <li>Reserve your package now</li>
                          <li>Make payment via bank transfer or in-person</li>
                          <li>Package will be activated upon payment confirmation</li>
                          <li>Start booking your sessions immediately after activation</li>
                        </ol>
                      </div>
                    </div>
                  </div>

                  {/* Submit Button */}
                  <button
                    type="submit"
                    disabled={isSubmitting}
                    className="w-full py-4 rounded-xl font-semibold text-white shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
                    style={{ 
                      background: isSubmitting 
                        ? '#9CA3AF' 
                        : `linear-gradient(135deg, ${colors.primary} 0%, ${colors.accent} 100%)` 
                    }}
                  >
                    {isSubmitting ? 'Reserving...' : 'Reserve Package'}
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}