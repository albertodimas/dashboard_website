generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [postgis, uuid_ossp(map: "uuid-ossp")]
}

model Tenant {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String
  subdomain        String            @unique
  email            String            @db.Citext
  phone            String?
  timezone         String            @default("UTC")
  currency         String            @default("USD")
  locale           String            @default("en")
  isActive         Boolean           @default(true)
  settings         Json              @default("{}")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  adPlacements     AdPlacement[]
  appointments     Appointment[]
  auditLogs        AuditLog[]
  businesses       Business[]
  customers        Customer[]
  notificationLogs NotificationLog[]
  packagePurchases PackagePurchase[]
  packages         Package[]
  reviews          Review[]
  services         Service[]
  users            User[]

  @@index([subdomain])
  @@map("tenants")
}

model User {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId      String       @db.Uuid
  email         String       @db.Citext
  emailVerified DateTime?
  passwordHash  String
  name          String
  avatar        String?
  phone         String?
  language      String       @default("en")
  totpSecret    String?
  totpEnabled   Boolean      @default(false)
  isActive      Boolean      @default(true)
  isAdmin       Boolean      @default(false)
  lastLoginAt   DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  auditLogs     AuditLog[]
  memberships   Membership[]
  sessions      Session[]
  staff         Staff?
  tenant        Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, email])
  @@index([email])
  @@map("users")
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String   @db.Uuid
  sessionToken String   @unique
  expires      DateTime
  ipAddress    String?
  userAgent    String?
  isAdmin      Boolean  @default(false)
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sessionToken])
  @@index([userId])
  @@map("sessions")
}

model Membership {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String   @db.Uuid
  businessId String   @db.Uuid
  role       UserRole
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, businessId])
  @@map("memberships")
}

model Business {
  id                   String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId             String                    @db.Uuid
  name                 String
  slug                 String
  customSlug           String?                   @unique
  businessType         String?
  description          String?
  logo                 String?
  coverImage           String?
  email                String            @db.Citext
  phone                String
  website              String?
  address              String
  city                 String
  state                String
  postalCode           String
  country              String                    @default("US")
  location             Unsupported("geography")?
  timezone             String
  currency             String                    @default("USD")
  settings             Json                      @default("{}")
  features             Json                      @default("{}")
  isActive             Boolean                   @default(true)
  isPremium            Boolean                   @default(false)
  isBlocked            Boolean                   @default(false)
  blockedReason        String?
  blockedAt            DateTime?
  enableStaffModule    Boolean                   @default(false)
  enablePackagesModule Boolean                   @default(false)
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  categoryId           String?                   @db.Uuid
  adPlacements         AdPlacement[]
  appointments         Appointment[]
  category             Category?                 @relation(fields: [categoryId], references: [id])
  tenant               Tenant                    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  coverageArea         CoverageArea?
  galleryItems         GalleryItem[]
  memberships          Membership[]
  packagePurchases     PackagePurchase[]
  businessCustomers    BusinessCustomer[]
  packages             Package[]
  reviews              Review[]
  services             Service[]
  staff                Staff[]
  workingHours         WorkingHour[]

  @@unique([tenantId, slug])
  @@index([slug])
  @@map("businesses")
}

model Staff {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  businessId        String         @db.Uuid
  userId            String?        @unique @db.Uuid
  name              String
  email             String
  phone             String?
  avatar            String?
  photo             String?
  bio               String?
  specialties       String[]
  isActive          Boolean        @default(true)
  canAcceptBookings Boolean        @default(true)
  commissionRate    Float?
  rating            Float          @default(0)
  totalReviews      Int            @default(0)
  displayOrder      Int            @default(0)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  appointments      Appointment[]
  breaks            Break[]
  serviceStaff      ServiceStaff[]
  business          Business       @relation(fields: [businessId], references: [id], onDelete: Cascade)
  user              User?          @relation(fields: [userId], references: [id])
  staffReviews      StaffReview[]
  workingHours      WorkingHour[]

  @@index([businessId])
  @@map("staff")
}

model WorkingHour {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  businessId String   @db.Uuid
  staffId    String?  @db.Uuid
  dayOfWeek  Int
  startTime  String
  endTime    String
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  staff      Staff?   @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@unique([businessId, staffId, dayOfWeek])
  @@map("working_hours")
}

model Break {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  staffId       String    @db.Uuid
  title         String
  startTime     String
  endTime       String
  isRecurring   Boolean   @default(false)
  recurringDays Int[]
  date          DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  staff         Staff     @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@index([staffId])
  @@map("breaks")
}

model Service {
  id                String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId          String           @db.Uuid
  businessId        String           @db.Uuid
  name              String
  description       String?
  duration          Int
  bufferBefore      Int              @default(0)
  bufferAfter       Int              @default(0)
  price             Float
  depositAmount     Float?
  currency          String           @default("USD")
  category          String?
  image             String?
  isActive          Boolean          @default(true)
  allowOnline       Boolean          @default(true)
  allowHomeService  Boolean          @default(false)
  maxAdvanceBooking Int              @default(30)
  minAdvanceBooking Int              @default(0)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  addons            Addon[]
  appointments      Appointment[]
  packageServices   PackageService[]
  serviceStaff      ServiceStaff[]
  business          Business         @relation(fields: [businessId], references: [id], onDelete: Cascade)
  tenant            Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@map("services")
}

model ServiceStaff {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  serviceId String   @db.Uuid
  staffId   String   @db.Uuid
  createdAt DateTime @default(now())
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  staff     Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@unique([serviceId, staffId])
  @@map("service_staff")
}

model Addon {
  id                String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  serviceId         String             @db.Uuid
  name              String
  description       String?
  price             Float
  duration          Int                @default(0)
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  service           Service            @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  appointmentAddons AppointmentAddon[]

  @@index([serviceId])
  @@map("addons")
}

model Customer {
  id                String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId          String                    @db.Uuid
  email             String                    @db.Citext @unique
  name              String
  phone             String?
  password          String?
  emailVerified     Boolean                   @default(false)
  avatar            String?
  address           String?
  city              String?
  state             String?
  postalCode        String?
  country           String?
  location          Unsupported("geography")?
  notes             String?
  tags              String[]
  metadata          Json                      @default("{}")
  isVip             Boolean                   @default(false)
  source            String?
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  lastName          String?
  appointments      Appointment[]
  tenant            Tenant                    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  loginAttempts     LoginAttempt[]
  packagePurchases  PackagePurchase[]
  passwordHistory   PasswordHistory[]
  reviews           Review[]
  staffReviews      StaffReview[]
  verificationCodes VerificationCode[]
  businesses        BusinessCustomer[]

  @@index([email])
  @@map("customers")
}

model Appointment {
  id                 String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId           String                    @db.Uuid
  businessId         String                    @db.Uuid
  customerId         String                    @db.Uuid
  serviceId          String                    @db.Uuid
  staffId            String                    @db.Uuid
  packageId          String?                   @db.Uuid
  packagePurchaseId  String?                   @db.Uuid
  customerName       String?
  customerPhone      String?
  startTime          DateTime
  endTime            DateTime
  status             AppointmentStatus         @default(PENDING)
  isHomeService      Boolean                   @default(false)
  serviceAddress     String?
  serviceLocation    Unsupported("geography")?
  estimatedArrival   DateTime?
  actualArrival      DateTime?
  distanceKm         Float?
  travelTimeMinutes  Int?
  notes              String?
  internalNotes      String?
  price              Float
  depositAmount      Float?
  totalAmount        Float
  cancellationReason String?
  cancelledAt        DateTime?
  cancelledBy        String?                   @db.Uuid
  confirmedAt        DateTime?
  completedAt        DateTime?
  noShowAt           DateTime?
  metadata           Json                      @default("{}")
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  addons             AppointmentAddon[]
  business           Business                  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  customer           Customer                  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  package            Package?                  @relation(fields: [packageId], references: [id])
  packagePurchase    PackagePurchase?          @relation(fields: [packagePurchaseId], references: [id])
  service            Service                   @relation(fields: [serviceId], references: [id])
  staff              Staff                     @relation(fields: [staffId], references: [id])
  tenant             Tenant                    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  payment            Payment?
  review             Review?
  routeETAs          RouteETA[]
  sessionUsage       SessionUsage?
  staffReview        StaffReview?
  waitlistEntry      WaitlistEntry?

  @@index([businessId, startTime])
  @@index([staffId, startTime])
  @@index([customerId])
  @@index([status])
  @@map("appointments")
}

model AppointmentAddon {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  appointmentId String      @db.Uuid
  addonId       String      @db.Uuid
  price         Float
  createdAt     DateTime    @default(now())
  addon         Addon       @relation(fields: [addonId], references: [id])
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@unique([appointmentId, addonId])
  @@map("appointment_addons")
}

model Payment {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  appointmentId   String        @unique @db.Uuid
  stripePaymentId String?       @unique
  amount          Float
  currency        String        @default("USD")
  status          PaymentStatus @default(PENDING)
  method          String?
  refundAmount    Float?
  refundedAt      DateTime?
  metadata        Json          @default("{}")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  appointment     Appointment   @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@index([stripePaymentId])
  @@map("payments")
}

model WaitlistEntry {
  id               String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  appointmentId    String?      @unique @db.Uuid
  businessId       String       @db.Uuid
  customerId       String       @db.Uuid
  serviceId        String       @db.Uuid
  preferredDate    DateTime
  preferredStaffId String?      @db.Uuid
  flexibility      String       @default("flexible")
  priority         Int          @default(0)
  notifiedAt       DateTime?
  convertedAt      DateTime?
  expiredAt        DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  appointment      Appointment? @relation(fields: [appointmentId], references: [id])

  @@index([businessId, preferredDate])
  @@map("waitlist_entries")
}

model Review {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId      String       @db.Uuid
  businessId    String       @db.Uuid
  customerId    String       @db.Uuid
  appointmentId String?      @unique @db.Uuid
  rating        Int
  comment       String?
  response      String?
  respondedAt   DateTime?
  isPublished   Boolean      @default(false)
  publishedAt   DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  business      Business     @relation(fields: [businessId], references: [id], onDelete: Cascade)
  customer      Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  tenant        Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([businessId, isPublished])
  @@map("reviews")
}

model StaffReview {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  staffId       String      @db.Uuid
  customerId    String      @db.Uuid
  appointmentId String      @unique @db.Uuid
  rating        Int
  comment       String?
  response      String?
  respondedAt   DateTime?
  isPublished   Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  customer      Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  staff         Staff       @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@index([staffId, isPublished])
  @@map("staff_reviews")
}

model CoverageArea {
  id             String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  businessId     String                    @unique @db.Uuid
  centerLocation Unsupported("geography")
  radiusKm       Float
  polygon        Unsupported("geography")?
  baseFee        Float                     @default(0)
  perKmRate      Float                     @default(0)
  minOrderAmount Float?
  maxDistanceKm  Float?
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
  business       Business                  @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("coverage_areas")
}

model RouteETA {
  id                String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  appointmentId     String                   @db.Uuid
  origin            Unsupported("geography")
  destination       Unsupported("geography")
  distanceKm        Float
  durationMinutes   Int
  trafficMultiplier Float                    @default(1.0)
  provider          String
  calculatedAt      DateTime                 @default(now())
  expiresAt         DateTime
  metadata          Json                     @default("{}")
  appointment       Appointment              @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@index([appointmentId, calculatedAt])
  @@map("route_etas")
}

model AdPlacement {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId    String    @db.Uuid
  businessId  String    @db.Uuid
  position    String
  startDate   DateTime
  endDate     DateTime
  impressions Int       @default(0)
  clicks      Int       @default(0)
  amount      Float
  isPaid      Boolean   @default(false)
  paidAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  business    Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([position, startDate, endDate])
  @@map("ad_placements")
}

model AuditLog {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId   String   @db.Uuid
  userId     String?  @db.Uuid
  action     String
  entityType String
  entityId   String
  oldValues  Json?
  newValues  Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user       User?    @relation(fields: [userId], references: [id])

  @@index([tenantId, entityType, entityId])
  @@index([createdAt])
  @@map("audit_logs")
}

model NotificationLog {
  id            String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId      String           @db.Uuid
  recipientId   String
  recipientType String
  type          NotificationType
  subject       String?
  content       String
  status        String
  sentAt        DateTime?
  failedAt      DateTime?
  error         String?
  metadata      Json             @default("{}")
  createdAt     DateTime         @default(now())
  tenant        Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, recipientId])
  @@index([createdAt])
  @@map("notification_logs")
}

model GalleryItem {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  businessId  String   @db.Uuid
  type        String
  url         String
  title       String
  description String?
  category    String?
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@map("gallery_items")
}

model Package {
  id            String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId      String            @db.Uuid
  businessId    String            @db.Uuid
  name          String
  description   String?
  price         Float
  originalPrice Float?
  discount      Float?
  duration      Int
  image         String?
  isActive      Boolean           @default(true)
  validityDays  Int?
  maxPurchases  Int?
  displayOrder  Int               @default(0)
  sessionCount  Int               @default(1)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  appointments  Appointment[]
  purchases     PackagePurchase[]
  services      PackageService[]
  business      Business          @relation(fields: [businessId], references: [id], onDelete: Cascade)
  tenant        Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@map("packages")
}

model PackageService {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  packageId String   @db.Uuid
  serviceId String   @db.Uuid
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  package   Package  @relation(fields: [packageId], references: [id], onDelete: Cascade)
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([packageId, serviceId])
  @@map("package_services")
}

model PackagePurchase {
  id                String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId          String               @db.Uuid
  businessId        String               @db.Uuid
  packageId         String               @db.Uuid
  customerId        String               @db.Uuid
  purchaseDate      DateTime             @default(now())
  expiryDate        DateTime?
  totalSessions     Int
  usedSessions      Int                  @default(0)
  remainingSessions Int
  pricePaid         Float
  paymentMethod     String?
  paymentStatus     PackagePaymentStatus @default(PENDING)
  status            PurchaseStatus       @default(PENDING)
  notes             String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  appointments      Appointment[]
  business          Business             @relation(fields: [businessId], references: [id], onDelete: Cascade)
  customer          Customer             @relation(fields: [customerId], references: [id], onDelete: Cascade)
  package           Package              @relation(fields: [packageId], references: [id], onDelete: Cascade)
  tenant            Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  sessionUsages     SessionUsage[]

  @@index([businessId, customerId])
  @@index([customerId])
  @@index([status])
  @@map("package_purchases")
}

model SessionUsage {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  purchaseId    String          @db.Uuid
  appointmentId String          @unique @db.Uuid
  usedAt        DateTime        @default(now())
  sessionNumber Int
  notes         String?
  appointment   Appointment     @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  purchase      PackagePurchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)

  @@index([purchaseId])
  @@map("session_usage")
}

model VerificationCode {
  id         String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customerId String           @db.Uuid
  code       String
  type       VerificationType
  expiresAt  DateTime
  usedAt     DateTime?
  createdAt  DateTime         @default(now())
  customer   Customer         @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId, type])
  @@index([code])
  @@map("verification_codes")
}

model PasswordHistory {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customerId   String   @db.Uuid
  passwordHash String
  createdAt    DateTime @default(now())
  customer     Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId])
  @@map("password_history")
}

model BusinessCustomer {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  businessId   String    @db.Uuid
  customerId   String    @db.Uuid
  joinedAt     DateTime  @default(now())
  isActive     Boolean   @default(true)
  notes        String?
  metadata     Json      @default("{}")
  lastVisit    DateTime?
  totalVisits  Int       @default(0)
  totalSpent   Float     @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  business     Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  customer     Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([businessId, customerId])
  @@index([customerId])
  @@index([businessId])
  @@map("business_customers")
}

model LoginAttempt {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String       @db.Citext
  ipAddress   String?
  userAgent   String?
  success     Boolean
  attemptedAt DateTime  @default(now())
  customerId  String?   @db.Uuid
  customer    Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([email, attemptedAt])
  @@index([customerId])
  @@map("login_attempts")
}

model Category {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String     @unique
  slug        String     @unique
  description String?
  icon        String?
  color       String?
  isActive    Boolean    @default(true)
  order       Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  businesses  Business[]

  @@index([slug])
  @@index([isActive])
  @@map("categories")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

enum UserRole {
  OWNER
  STAFF
  CUSTOMER
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  REFUNDED
}

enum NotificationType {
  EMAIL
  SMS
  PUSH
}

enum PurchaseStatus {
  PENDING
  ACTIVE
  EXPIRED
  COMPLETED
  CANCELLED
}

enum PackagePaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum VerificationType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}
