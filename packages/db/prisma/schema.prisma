generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [postgis, uuid_ossp(map: "uuid-ossp")]
}

enum UserRole {
  OWNER
  STAFF
  CUSTOMER
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  REFUNDED
}

enum NotificationType {
  EMAIL
  SMS
  PUSH
}

model Tenant {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  subdomain         String        @unique
  email             String
  phone             String?
  timezone          String        @default("UTC")
  currency          String        @default("USD")
  locale            String        @default("en")
  isActive          Boolean       @default(true)
  settings          Json          @default("{}")
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  users             User[]
  businesses        Business[]
  services          Service[]
  appointments      Appointment[]
  customers         Customer[]
  reviews           Review[]
  adPlacements      AdPlacement[]
  auditLogs         AuditLog[]
  notificationLogs  NotificationLog[]

  @@index([subdomain])
  @@map("tenants")
}

model User {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId          String        @db.Uuid
  email             String        
  emailVerified     DateTime?
  passwordHash      String
  name              String
  avatar            String?
  phone             String?
  language          String        @default("en")
  totpSecret        String?
  totpEnabled       Boolean       @default(false)
  isActive          Boolean       @default(true)
  isAdmin           Boolean       @default(false)
  lastLoginAt       DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  tenant            Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  memberships       Membership[]
  staff             Staff?
  sessions          Session[]
  auditLogs         AuditLog[]

  @@unique([tenantId, email])
  @@index([email])
  @@map("users")
}

model Session {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String        @db.Uuid
  sessionToken      String        @unique
  expires           DateTime
  ipAddress         String?
  userAgent         String?
  isAdmin           Boolean       @default(false)
  createdAt         DateTime      @default(now())

  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sessionToken])
  @@index([userId])
  @@map("sessions")
}

model Membership {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String        @db.Uuid
  businessId        String        @db.Uuid
  role              UserRole
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  business          Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([userId, businessId])
  @@map("memberships")
}

model Business {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId          String        @db.Uuid
  name              String
  slug              String
  customSlug        String?       @unique
  description       String?
  logo              String?
  coverImage        String?
  email             String
  phone             String
  website           String?
  address           String
  city              String
  state             String
  postalCode        String
  country           String        @default("US")
  location          Unsupported("geography(Point, 4326)")?
  timezone          String
  currency          String        @default("USD")
  settings          Json          @default("{}")
  features          Json          @default("{}")
  isActive          Boolean       @default(true)
  isPremium         Boolean       @default(false)
  isBlocked         Boolean       @default(false)
  blockedReason     String?
  blockedAt         DateTime?
  enableStaffModule Boolean       @default(false)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  tenant            Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  memberships       Membership[]
  staff             Staff[]
  services          Service[]
  appointments      Appointment[]
  workingHours      WorkingHour[]
  reviews           Review[]
  coverageArea      CoverageArea?
  adPlacements      AdPlacement[]
  galleryItems      GalleryItem[]

  @@unique([tenantId, slug])
  @@index([slug])
  @@map("businesses")
}

model Staff {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  businessId        String        @db.Uuid
  userId            String?       @unique @db.Uuid
  name              String
  email             String
  phone             String?
  avatar            String?
  photo             String?
  bio               String?
  specialties       String[]
  isActive          Boolean       @default(true)
  canAcceptBookings Boolean       @default(true)
  commissionRate    Float?
  rating            Float         @default(0)
  totalReviews      Int           @default(0)
  displayOrder      Int           @default(0)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  business          Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  user              User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  appointments      Appointment[]
  workingHours      WorkingHour[]
  breaks            Break[]
  serviceStaff      ServiceStaff[]
  staffReviews      StaffReview[]

  @@index([businessId])
  @@map("staff")
}

model WorkingHour {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  businessId        String        @db.Uuid
  staffId           String?       @db.Uuid
  dayOfWeek         Int
  startTime         String
  endTime           String
  isActive          Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  business          Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  staff             Staff?        @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@unique([businessId, staffId, dayOfWeek])
  @@map("working_hours")
}

model Break {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  staffId           String        @db.Uuid
  title             String
  startTime         String
  endTime           String
  isRecurring       Boolean       @default(false)
  recurringDays     Int[]
  date              DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  staff             Staff         @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@index([staffId])
  @@map("breaks")
}

model Service {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId          String        @db.Uuid
  businessId        String        @db.Uuid
  name              String
  description       String?
  duration          Int
  bufferBefore      Int           @default(0)
  bufferAfter       Int           @default(0)
  price             Float
  depositAmount     Float?
  currency          String        @default("USD")
  category          String?
  image             String?
  isActive          Boolean       @default(true)
  allowOnline       Boolean       @default(true)
  allowHomeService  Boolean       @default(false)
  maxAdvanceBooking Int           @default(30)
  minAdvanceBooking Int           @default(0)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  tenant            Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  business          Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  appointments      Appointment[]
  addons            Addon[]
  serviceStaff      ServiceStaff[]

  @@index([businessId])
  @@map("services")
}

model ServiceStaff {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  serviceId         String        @db.Uuid
  staffId           String        @db.Uuid
  createdAt         DateTime      @default(now())

  service           Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  staff             Staff         @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@unique([serviceId, staffId])
  @@map("service_staff")
}

model Addon {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  serviceId         String        @db.Uuid
  name              String
  description       String?
  price             Float
  duration          Int           @default(0)
  isActive          Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  service           Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  appointmentAddons AppointmentAddon[]

  @@index([serviceId])
  @@map("addons")
}

model Customer {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId          String        @db.Uuid
  email             String
  name              String
  phone             String?
  avatar            String?
  address           String?
  city              String?
  state             String?
  postalCode        String?
  country           String?
  location          Unsupported("geography(Point, 4326)")?
  notes             String?
  tags              String[]
  metadata          Json          @default("{}")
  isVip             Boolean       @default(false)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  tenant            Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  appointments      Appointment[]
  reviews           Review[]
  staffReviews      StaffReview[]

  @@unique([tenantId, email])
  @@index([email])
  @@map("customers")
}

model Appointment {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId          String        @db.Uuid
  businessId        String        @db.Uuid
  customerId        String        @db.Uuid
  serviceId         String        @db.Uuid
  staffId           String        @db.Uuid
  startTime         DateTime
  endTime           DateTime
  status            AppointmentStatus @default(PENDING)
  isHomeService     Boolean       @default(false)
  serviceAddress    String?
  serviceLocation   Unsupported("geography(Point, 4326)")?
  estimatedArrival  DateTime?
  actualArrival     DateTime?
  distanceKm        Float?
  travelTimeMinutes Int?
  notes             String?
  internalNotes     String?
  price             Float
  depositAmount     Float?
  totalAmount       Float
  cancellationReason String?
  cancelledAt       DateTime?
  cancelledBy       String?       @db.Uuid
  confirmedAt       DateTime?
  completedAt       DateTime?
  noShowAt          DateTime?
  metadata          Json          @default("{}")
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  tenant            Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  business          Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  customer          Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  service           Service       @relation(fields: [serviceId], references: [id])
  staff             Staff         @relation(fields: [staffId], references: [id])
  addons            AppointmentAddon[]
  payment           Payment?
  review            Review?
  staffReview       StaffReview?
  routeETAs         RouteETA[]
  waitlistEntry     WaitlistEntry?

  @@index([businessId, startTime])
  @@index([staffId, startTime])
  @@index([customerId])
  @@index([status])
  @@map("appointments")
}

model AppointmentAddon {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  appointmentId     String        @db.Uuid
  addonId           String        @db.Uuid
  price             Float
  createdAt         DateTime      @default(now())

  appointment       Appointment   @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  addon             Addon         @relation(fields: [addonId], references: [id])

  @@unique([appointmentId, addonId])
  @@map("appointment_addons")
}

model Payment {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  appointmentId     String        @unique @db.Uuid
  stripePaymentId   String?       @unique
  amount            Float
  currency          String        @default("USD")
  status            PaymentStatus @default(PENDING)
  method            String?
  refundAmount      Float?
  refundedAt        DateTime?
  metadata          Json          @default("{}")
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  appointment       Appointment   @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@index([stripePaymentId])
  @@map("payments")
}

model WaitlistEntry {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  appointmentId     String?       @unique @db.Uuid
  businessId        String        @db.Uuid
  customerId        String        @db.Uuid
  serviceId         String        @db.Uuid
  preferredDate     DateTime
  preferredStaffId  String?       @db.Uuid
  flexibility       String        @default("flexible")
  priority          Int           @default(0)
  notifiedAt        DateTime?
  convertedAt       DateTime?
  expiredAt         DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  appointment       Appointment?  @relation(fields: [appointmentId], references: [id], onDelete: SetNull)

  @@index([businessId, preferredDate])
  @@map("waitlist_entries")
}

model Review {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId          String        @db.Uuid
  businessId        String        @db.Uuid
  customerId        String        @db.Uuid
  appointmentId     String?       @unique @db.Uuid
  rating            Int
  comment           String?
  response          String?
  respondedAt       DateTime?
  isPublished       Boolean       @default(false)
  publishedAt       DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  tenant            Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  business          Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  customer          Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  appointment       Appointment?  @relation(fields: [appointmentId], references: [id], onDelete: SetNull)

  @@index([businessId, isPublished])
  @@map("reviews")
}

model StaffReview {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  staffId           String        @db.Uuid
  customerId        String        @db.Uuid
  appointmentId     String        @unique @db.Uuid
  rating            Int
  comment           String?
  response          String?
  respondedAt       DateTime?
  isPublished       Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  staff             Staff         @relation(fields: [staffId], references: [id], onDelete: Cascade)
  customer          Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  appointment       Appointment   @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@index([staffId, isPublished])
  @@map("staff_reviews")
}

model CoverageArea {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  businessId        String        @unique @db.Uuid
  centerLocation    Unsupported("geography(Point, 4326)")
  radiusKm          Float
  polygon           Unsupported("geography(Polygon, 4326)")?
  baseFee           Float         @default(0)
  perKmRate         Float         @default(0)
  minOrderAmount    Float?
  maxDistanceKm     Float?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  business          Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("coverage_areas")
}

model RouteETA {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  appointmentId     String        @db.Uuid
  origin            Unsupported("geography(Point, 4326)")
  destination       Unsupported("geography(Point, 4326)")
  distanceKm        Float
  durationMinutes   Int
  trafficMultiplier Float         @default(1.0)
  provider          String
  calculatedAt      DateTime      @default(now())
  expiresAt         DateTime
  metadata          Json          @default("{}")

  appointment       Appointment   @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@index([appointmentId, calculatedAt])
  @@map("route_etas")
}

model AdPlacement {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId          String        @db.Uuid
  businessId        String        @db.Uuid
  position          String
  startDate         DateTime
  endDate           DateTime
  impressions       Int           @default(0)
  clicks            Int           @default(0)
  amount            Float
  isPaid            Boolean       @default(false)
  paidAt            DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  tenant            Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  business          Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([position, startDate, endDate])
  @@map("ad_placements")
}

model AuditLog {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId          String        @db.Uuid
  userId            String?       @db.Uuid
  action            String
  entityType        String
  entityId          String
  oldValues         Json?
  newValues         Json?
  ipAddress         String?
  userAgent         String?
  createdAt         DateTime      @default(now())

  tenant            Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user              User?         @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([tenantId, entityType, entityId])
  @@index([createdAt])
  @@map("audit_logs")
}

model NotificationLog {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId          String        @db.Uuid
  recipientId       String
  recipientType     String
  type              NotificationType
  subject           String?
  content           String
  status            String
  sentAt            DateTime?
  failedAt          DateTime?
  error             String?
  metadata          Json          @default("{}")
  createdAt         DateTime      @default(now())

  tenant            Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, recipientId])
  @@index([createdAt])
  @@map("notification_logs")
}

model GalleryItem {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  businessId        String        @db.Uuid
  type              String        // 'image' or 'video'
  url               String
  title             String
  description       String?
  category          String?
  order             Int           @default(0)
  isActive          Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  business          Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@map("gallery_items")
}